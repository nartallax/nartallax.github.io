{"mappings":"kUAAA,IAAAA,EAAAC,EAAA,S,aAGO,SAASC,EAAKC,GACpB,MAAMC,EAAQ,IAAI,EAAAC,EAAAC,+BAA8BH,EAAM,MAEhDI,EAAMH,EAAMI,QAAQ,CACzBC,EAAG,EAAGC,EAAG,EACTC,OAAQ,EAAGC,OAAQ,EACnBC,KAAM,SACNC,MAAO,UACPC,OAAQ,GACRC,QAAS,YAIVZ,EAAMa,gBAAgB,CACrBC,YAAaX,EACbY,SAAU,UACVC,KAAM,CACLP,KAAM,SACNC,MAAO,UACPC,OAAQ,EACRC,QAAS,aAKXZ,EAAMa,gBAAgB,CACrBC,YAAaX,EACbY,SAAU,SACVE,UAAW,GACXD,KAAM,CACLP,KAAM,SACNC,MAAO,UACPC,OAAQ,EACRC,QAAS,aAIX,MAAMM,EAAQlB,EAAMa,gBAAgB,CACnCC,YAAaX,EACbY,SAAU,QACVC,KAAM,CACLP,KAAM,QACNC,MAAO,UACPC,OAAQ,GACRC,QAAS,aAKXZ,EAAMa,gBAAgB,CACrBC,YAAaI,EACbH,SAAU,OACVE,UAAW,GACXD,KAAM,CACLP,KAAM,aACNC,MAAO,UACPC,OAAQ,EACRC,QAAS,aAKXZ,EAAMa,gBAAgB,CACrBC,YAAaX,EACbY,SAAU,YACVC,KAAM,CACLP,KAAM,SACNC,MAAO,UACPC,OAAQ,EACRC,QAAS,cAKX,EAAAhB,EAAAuB,6BAA4BnB,EAAMoB,KAAKC,IACnCA,EAAY,IAGfrB,EAAMsB,KAAiB,IAAZD,EAAkB,MAE/B,C,sCC/EA,SAAgBE,EAA4BxB,EAAgCyB,EAAkCC,GAC7G,IAAIC,GAAU,EAEVC,EAAe,EAEnB,MAAMC,EAAkBC,IACvB,GAAGH,EAEF,YADAD,MAGD,IAAI1B,EAAK+B,YAGR,OAFAL,WACAC,GAAU,GAGX,MAAMK,EAAQF,EAAOF,EACrBA,EAAeE,EACfG,sBAAsBJ,GACtBJ,EAAQO,EAAA,EAKT,OAFAC,sBAAsBJ,GAEf,IAAMF,GAAU,CACxB,C,6IC5BA,IAAAO,EAAApC,EAAA,S,0BAkBO,MAAMqC,EAKZC,YAAYpC,EAAoCqC,G,UAAAA,EAC/CC,KAAKC,WAAa,IAAI,EAAAC,EAAAC,mBACtBH,KAAKjB,KAAM,EAAAa,EAAAQ,QAAO,CAACC,IAAK,QACxB3C,EAAK4C,YAAYN,KAAKjB,KACtBiB,KAAKO,iBACL,EAAAC,EAAAC,UAAS/C,GAAM,IAAMsC,KAAKO,iBAC3B,CAEQA,gBACP,MAAM7C,EAAOsC,KAAKjB,IAAI2B,cACtB,IAAIhD,EACH,OAED,MAAMiD,EAAIjD,EAAKkD,YACTC,EAAInD,EAAKoD,aACfd,KAAKjB,IAAIgC,aAAa,QAASJ,EAAI,IACnCX,KAAKjB,IAAIgC,aAAa,SAAUF,EAAI,IACpCb,KAAKjB,IAAIgC,aAAa,UAAW,IAAIJ,EAAI,MAAME,EAAI,KAAKF,KAAKE,IAC9D,CAEQG,gBAAgBC,GACvB,MAAMC,GAAK,EAAAtB,EAAAQ,QAAO,CAACC,IAAK,SAAUc,MAAO,CACxCC,GAAI,EAAGC,GAAI,EAAGC,EAAGL,EAAK3C,OAAQiD,KAAMN,EAAK5C,MAAOmD,OAAQP,EAAK1C,QAAS,eAAgB,KAGvF,OADAyB,KAAKjB,IAAIuB,YAAYY,GACdA,CACR,CAEAnD,QAAQkD,GACP,OAAOjB,KAAKC,WAAWlC,QAAQ,CAC9BU,YAAa,KACbG,UAAW,QACRqC,EACHC,GAAIlB,KAAKgB,gBAAgBC,IAE3B,CAEAzC,gBAAgBiD,GACf,OAAOzB,KAAKC,WAAWzB,gBAAgB,IACnCiD,EACH9C,KAAM,IACF8C,EAAK9C,KACRF,YAAaiD,MAAMC,QAAQF,EAAKhD,aAAegD,EAAKhD,YAAc,CAACgD,EAAKhD,aACxEG,UAAW6C,EAAK7C,WAAa,EAC7BsC,GAAIlB,KAAKgB,gBAAgBS,EAAK9C,QAGjC,CAEAM,KAAKD,EAAmB4C,EAAiB,GACxC,IAAI,IAAIC,EAAI,EAAGA,EAAID,EAAgBC,IAClC7B,KAAKC,WAAWhB,KAAKD,EAAY4C,GAElC,IAAI,MAAMjD,KAAQqB,KAAKC,WAAW6B,OAAO,CACxC,MAAMZ,EAAKvC,EAAKuC,GAEhB,IAAIlD,EAAWC,EACf,GAAIU,EAAKF,aAAgBE,EAAKC,UAGvB,CACN,MAAMH,EAAcuB,KAAKC,WAAW8B,iBAAiBpD,EAAKF,aACpDuD,EAAKrD,EAAKX,EAAIS,EAAYT,EAC1BiE,EAAKtD,EAAKV,EAAIQ,EAAYR,EAChC,IAAIiE,EAAOC,KAAKC,KAAKJ,GAAM,EAAIC,GAAM,GACrC,MAAMI,EAAQF,KAAKG,MAAML,EAAID,GAC7BE,GAAQvD,EAAKC,UACbZ,EAAIS,EAAYT,EAAKkE,EAAOC,KAAKI,IAAIF,GACrCpE,EAAIQ,EAAYR,EAAKiE,EAAOC,KAAKK,IAAIH,EACtC,MAXCrE,EAAIW,EAAKX,EACTC,EAAIU,EAAKV,EAYViD,EAAGH,aAAa,KAAM/C,EAAKgC,KAAKD,KAAQ,IACxCmB,EAAGH,aAAa,KAAM9C,EAAK+B,KAAKD,KAAQ,GACzC,CACD,E,sECjGD,IAAAH,EAAApC,EAAA,SAEO,SAASiF,EAASvB,EAAiBwB,IACzC,EAAA9C,EAAA+C,SAAQzB,GAAI,KACX,MAAM0B,EAAW,IAAIC,gBAAeC,IACnC,IAAI,MAAMC,KAASD,EAGfC,EAAMC,SAAW9B,IACnB+B,QAAQC,IAAI,OACZR,EAASK,GACV,IAIF,OADAH,EAASO,QAAQjC,GACV,IAAM0B,EAASQ,YAAU,GAC9B,CAACC,QAAS,QACd,C,+ECTA,MAAMC,EAAI,WAEH,MAAMC,EAEZzB,OAAc,GAEd7C,KAAKD,GACJgB,KAAKwD,aAAaxE,GAClBgB,KAAKyD,aAAazE,EACnB,CAEAjB,QAAQY,GAEP,OADAqB,KAAK8B,OAAO4B,KAAK/E,GACVA,CACR,CAEAoD,iBAAiBD,GAChB,MAAM1D,EAAO0D,EAAO6B,KAAIhF,GAAQA,EAAKP,OAAMwF,QAAO,CAACC,EAAGC,IAAMD,EAAIC,GAAG,GAKnE,MAAO,C,KAAC1F,E,EAJE0D,EAAO6B,KAAIhF,GAAQA,EAAKP,KAAOO,EAAKX,IAAG4F,QAAO,CAACC,EAAGC,IAAMD,EAAIC,GAAG,GAAK1F,E,EACpE0D,EAAO6B,KAAIhF,GAAQA,EAAKP,KAAOO,EAAKV,IAAG2F,QAAO,CAACC,EAAGC,IAAMD,EAAIC,GAAG,GAAK1F,E,OAC/D0D,EAAO6B,KAAIhF,GAAQA,EAAKP,KAAOO,EAAKT,SAAQ0F,QAAO,CAACC,EAAGC,IAAMD,EAAIC,GAAG,GAAK1F,E,OACzE0D,EAAO6B,KAAIhF,GAAQA,EAAKP,KAAOO,EAAKR,SAAQyF,QAAO,CAACC,EAAGC,IAAMD,EAAIC,GAAG,GAAK1F,EAEzF,CAEAI,gBAAgBiD,GACf,MAAMuB,EAAShD,KAAK+B,iBAAiBL,MAAMC,QAAQF,EAAKhD,aAAegD,EAAKhD,YAAc,CAACgD,EAAKhD,cAE1FsF,EAAa5B,KAAKC,KAAKkB,EAAKN,EAAO5E,KAAQqD,EAAK/C,WAAa+C,EAAKuC,SAAU,EAAK,GACjFC,GAAOxC,EAAKyC,UAAY/B,KAAKgC,UAAYhC,KAAKiC,GAAK,EAEzD,OAAOpE,KAAKjC,QAAQ,CACnBC,EAAGgF,EAAOhF,EAAIyD,EAAK/C,SAAWyD,KAAKI,IAAI0B,GACvChG,EAAG+E,EAAO/E,EAAIwD,EAAK/C,SAAWyD,KAAKK,IAAIyB,GACvC/F,OAAQ8E,EAAO9E,OAAS6F,EAAa5B,KAAKK,IAAIyB,GAC9C9F,OAAQ6E,EAAO7E,OAAS4F,EAAa5B,KAAKI,IAAI0B,MAC3CxC,EAAK9C,MAEV,CAEQ6E,aAAaxE,GACpB,IAAI,IAAI6C,EAAI,EAAGA,EAAI7B,KAAK8B,OAAOuC,OAAQxC,IAAI,CAC1C,MAAMlD,EAAOqB,KAAK8B,OAAOD,GACzB,IAAI,IAAIyC,EAAIzC,EAAI,EAAGyC,EAAItE,KAAK8B,OAAOuC,OAAQC,IAAI,CAC9C,MAAMC,EAAYvE,KAAK8B,OAAOwC,GACxBtC,EAAKuC,EAAUvG,EAAIW,EAAKX,EACxBiE,EAAKsC,EAAUtG,EAAIU,EAAKV,EACxBuG,EAAQxC,GAAO,EAAMC,GAAM,EAC3BwC,EAAYtC,KAAKG,MAAML,EAAID,GAE3B0C,EAAiBpB,EAAMiB,EAAUnG,KAAQoG,EAASxF,EACxDL,EAAKT,QAAUwG,EAAiBvC,KAAKI,IAAIkC,GACzC9F,EAAKR,QAAUuG,EAAiBvC,KAAKK,IAAIiC,GAEzC,MAAME,EAAkBrB,EAAM3E,EAAKP,KAAQoG,EAASxF,EACpDuF,EAAUrG,QAAUyG,EAAkBxC,KAAKI,KAAKkC,GAChDF,EAAUpG,QAAUwG,EAAkBxC,KAAKK,KAAKiC,EACjD,CACD,CACD,CAEUhB,aAAazE,GACtB,IAAI,MAAML,KAAQqB,KAAK8B,OACtBnD,EAAKX,GAAKW,EAAKT,OAASc,EACxBL,EAAKV,GAAKU,EAAKR,OAASa,CAE1B,E","sources":["src/sketches/planets/planets.ts","src/common/cycled_request_animation_frame.ts","src/sketches/planets/planets_graphics.ts","src/common/on_resize.ts","src/sketches/planets/planets_simulation.ts"],"sourcesContent":["import {cycledRequestAnimationFrame} from \"common/cycled_request_animation_frame\"\nimport {PlanetsSimulationWithGraphics} from \"sketches/planets/planets_graphics\"\n\nexport function main(root: HTMLElement): void {\n\tconst scene = new PlanetsSimulationWithGraphics(root, 1e-9)\n\n\tconst sun = scene.addBody({\n\t\tx: 0, y: 0,\n\t\txSpeed: 0, ySpeed: 0,\n\t\tmass: 1.989e30, // kg\n\t\tcolor: \"#eca72c\",\n\t\tradius: 25,\n\t\toutline: \"#ee5622\"\n\t})\n\n\t// mercury\n\tscene.addOrbitingBody({\n\t\torbitTarget: sun,\n\t\tdistance: 57909050000,\n\t\tbody: {\n\t\t\tmass: 3.3011e23,\n\t\t\tcolor: \"#96031a\",\n\t\t\tradius: 5,\n\t\t\toutline: \"#363636\"\n\t\t}\n\t})\n\n\t// venus\n\tscene.addOrbitingBody({\n\t\torbitTarget: sun,\n\t\tdistance: 108208000000,\n\t\torbitZoom: 0.9,\n\t\tbody: {\n\t\t\tmass: 4.8675e24,\n\t\t\tcolor: \"#63ccca\",\n\t\t\tradius: 8,\n\t\t\toutline: \"#5da9e9\"\n\t\t}\n\t})\n\n\tconst earth = scene.addOrbitingBody({\n\t\torbitTarget: sun,\n\t\tdistance: 147.12e9,\n\t\tbody: {\n\t\t\tmass: 5.972e24,\n\t\t\tcolor: \"#087e8b\",\n\t\t\tradius: 10,\n\t\t\toutline: \"#08605f\"\n\t\t}\n\t})\n\n\t// moon\n\tscene.addOrbitingBody({\n\t\torbitTarget: earth,\n\t\tdistance: 384400000,\n\t\torbitZoom: 60,\n\t\tbody: {\n\t\t\tmass: 7.34767309e22,\n\t\t\tcolor: \"#ccc9e7\",\n\t\t\tradius: 2,\n\t\t\toutline: \"#f5f5f5\"\n\t\t}\n\t})\n\n\t// mars\n\tscene.addOrbitingBody({\n\t\torbitTarget: sun,\n\t\tdistance: 227939366000,\n\t\tbody: {\n\t\t\tmass: 6.4171e23,\n\t\t\tcolor: \"#bc8034\",\n\t\t\tradius: 7,\n\t\t\toutline: \"#ff8552\"\n\t\t}\n\t})\n\n\n\tcycledRequestAnimationFrame(scene.svg, deltaTime => {\n\t\tif(deltaTime > 50){\n\t\t\treturn\n\t\t}\n\t\tscene.step(deltaTime * 5000, 25)\n\t})\n}\n","/** Wrapped RequestAnimationFrame, which cycles.\n * Passes time since previous frame as argument.\n * Returns stopper function\n * Unmounting root also stops it */\nexport function cycledRequestAnimationFrame(root: HTMLElement | SVGElement, handler: (delta: number) => void, onStop?: () => void): () => void {\n\tlet stopped = false\n\n\tlet prevCallTime = 0\n\n\tconst wrappedHandler = (time: number) => {\n\t\tif(stopped){\n\t\t\tonStop?.()\n\t\t\treturn\n\t\t}\n\t\tif(!root.isConnected){\n\t\t\tonStop?.()\n\t\t\tstopped = true\n\t\t\treturn\n\t\t}\n\t\tconst delta = time - prevCallTime\n\t\tprevCallTime = time\n\t\trequestAnimationFrame(wrappedHandler)\n\t\thandler(delta)\n\t}\n\n\trequestAnimationFrame(wrappedHandler)\n\n\treturn () => stopped = true\n}","import {svgTag} from \"@nartallax/cardboard-dom\"\nimport {onResize} from \"common/on_resize\"\nimport {PlanetSimulationBody, PlanetsSimulation} from \"sketches/planets/planets_simulation\"\n\ninterface BodyInternalProps {\n\tel: SVGCircleElement\n\torbitTarget: PlanetSimulationBody[] | null\n\torbitZoom: number | null\n}\n\ninterface BodyBase extends PlanetSimulationBody {\n\tcolor: string\n\toutline: string\n\tradius: number\n}\n\nexport type PlanetSimulationBodyWithGraphics = BodyBase & BodyInternalProps\n\nexport class PlanetsSimulationWithGraphics {\n\n\treadonly svg: SVGSVGElement\n\tprivate readonly simulation: PlanetsSimulation<PlanetSimulationBodyWithGraphics>\n\n\tconstructor(root: HTMLElement, private readonly zoom: number) {\n\t\tthis.simulation = new PlanetsSimulation()\n\t\tthis.svg = svgTag({tag: \"svg\"})\n\t\troot.appendChild(this.svg)\n\t\tthis.updateSvgSize()\n\t\tonResize(root, () => this.updateSvgSize())\n\t}\n\n\tprivate updateSvgSize(): void {\n\t\tconst root = this.svg.parentElement\n\t\tif(!root){\n\t\t\treturn\n\t\t}\n\t\tconst w = root.clientWidth\n\t\tconst h = root.clientHeight\n\t\tthis.svg.setAttribute(\"width\", w + \"\")\n\t\tthis.svg.setAttribute(\"height\", h + \"\")\n\t\tthis.svg.setAttribute(\"viewBox\", `${-w / 2} ${-h / 2} ${w} ${h}`)\n\t}\n\n\tprivate makeBodyElement(base: Omit<BodyBase, \"x\" | \"y\" | \"xSpeed\" | \"ySpeed\">): SVGCircleElement {\n\t\tconst el = svgTag({tag: \"circle\", attrs: {\n\t\t\tcx: 0, cy: 0, r: base.radius, fill: base.color, stroke: base.outline, \"stroke-width\": 3\n\t\t}})\n\t\tthis.svg.appendChild(el)\n\t\treturn el\n\t}\n\n\taddBody(base: BodyBase & Partial<BodyInternalProps>): PlanetSimulationBodyWithGraphics {\n\t\treturn this.simulation.addBody({\n\t\t\torbitTarget: null,\n\t\t\torbitZoom: null,\n\t\t\t...base,\n\t\t\tel: this.makeBodyElement(base)\n\t\t})\n\t}\n\n\taddOrbitingBody(args: {orbitTarget: PlanetSimulationBody | PlanetSimulationBody[], body: Omit<BodyBase, \"x\" | \"y\" | \"xSpeed\" | \"ySpeed\">, distance: number, position?: number, reverse?: boolean, orbitZoom?: number}): PlanetSimulationBodyWithGraphics {\n\t\treturn this.simulation.addOrbitingBody({\n\t\t\t...args,\n\t\t\tbody: {\n\t\t\t\t...args.body,\n\t\t\t\torbitTarget: Array.isArray(args.orbitTarget) ? args.orbitTarget : [args.orbitTarget],\n\t\t\t\torbitZoom: args.orbitZoom ?? 1,\n\t\t\t\tel: this.makeBodyElement(args.body)\n\t\t\t}\n\t\t})\n\t}\n\n\tstep(deltaTime: number, logicStepCount = 1): void {\n\t\tfor(let i = 0; i < logicStepCount; i++){\n\t\t\tthis.simulation.step(deltaTime / logicStepCount)\n\t\t}\n\t\tfor(const body of this.simulation.bodies){\n\t\t\tconst el = body.el!\n\n\t\t\tlet x: number, y: number\n\t\t\tif(!body.orbitTarget || !body.orbitZoom){\n\t\t\t\tx = body.x\n\t\t\t\ty = body.y\n\t\t\t} else {\n\t\t\t\tconst orbitTarget = this.simulation.findCenterOfMass(body.orbitTarget)\n\t\t\t\tconst dx = body.x - orbitTarget.x\n\t\t\t\tconst dy = body.y - orbitTarget.y\n\t\t\t\tlet dist = Math.sqrt(dx ** 2 + dy ** 2)\n\t\t\t\tconst angle = Math.atan2(dy, dx)\n\t\t\t\tdist *= body.orbitZoom\n\t\t\t\tx = orbitTarget.x + (dist * Math.cos(angle))\n\t\t\t\ty = orbitTarget.y + (dist * Math.sin(angle))\n\t\t\t}\n\n\t\t\tel.setAttribute(\"cx\", (x * this.zoom) + \"\")\n\t\t\tel.setAttribute(\"cy\", (y * this.zoom) + \"\")\n\t\t}\n\t}\n\n}","import {onMount} from \"@nartallax/cardboard-dom\"\n\nexport function onResize(el: HTMLElement, callback: (resizeEvent: ResizeObserverEntry) => void): void {\n\tonMount(el, () => {\n\t\tconst observer = new ResizeObserver(entries => {\n\t\t\tfor(const entry of entries){\n\t\t\t\t// I'm not sure if this check can be false in our case\n\t\t\t\t// maybe it will fire for nested elements..? this needs testing\n\t\t\t\tif(entry.target === el){\n\t\t\t\t\tconsole.log(\"uwu\")\n\t\t\t\t\tcallback(entry)\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\tobserver.observe(el)\n\t\treturn () => observer.disconnect()\n\t}, {ifInDom: \"call\"})\n}","export interface PlanetSimulationBody {\n\tx: number\n\ty: number\n\tmass: number\n\txSpeed: number\n\tySpeed: number\n}\n\nconst G = 6.67408e-11\n\nexport class PlanetsSimulation<B extends PlanetSimulationBody> {\n\n\tbodies: B[] = []\n\n\tstep(deltaTime: number): void {\n\t\tthis.velocityStep(deltaTime)\n\t\tthis.positionStep(deltaTime)\n\t}\n\n\taddBody(body: B): B {\n\t\tthis.bodies.push(body)\n\t\treturn body\n\t}\n\n\tfindCenterOfMass(bodies: readonly PlanetSimulationBody[]): PlanetSimulationBody {\n\t\tconst mass = bodies.map(body => body.mass).reduce((a, b) => a + b, 0)\n\t\tconst x = bodies.map(body => body.mass * body.x).reduce((a, b) => a + b, 0) / mass\n\t\tconst y = bodies.map(body => body.mass * body.y).reduce((a, b) => a + b, 0) / mass\n\t\tconst xSpeed = bodies.map(body => body.mass * body.xSpeed).reduce((a, b) => a + b, 0) / mass\n\t\tconst ySpeed = bodies.map(body => body.mass * body.ySpeed).reduce((a, b) => a + b, 0) / mass\n\t\treturn {mass, x, y, xSpeed, ySpeed}\n\t}\n\n\taddOrbitingBody(args: {orbitTarget: PlanetSimulationBody | PlanetSimulationBody[], body: Omit<B, \"x\" | \"y\" | \"xSpeed\" | \"ySpeed\">, distance: number, position?: number, reverse?: boolean}): B {\n\t\tconst target = this.findCenterOfMass(Array.isArray(args.orbitTarget) ? args.orbitTarget : [args.orbitTarget])\n\n\t\tconst orbitSpeed = Math.sqrt((G * target.mass) / args.distance) * (args.reverse ? -1 : 1)\n\t\tconst pos = (args.position ?? Math.random()) * Math.PI * 2\n\n\t\treturn this.addBody({\n\t\t\tx: target.x + args.distance * Math.cos(pos),\n\t\t\ty: target.y + args.distance * Math.sin(pos),\n\t\t\txSpeed: target.xSpeed - orbitSpeed * Math.sin(pos),\n\t\t\tySpeed: target.ySpeed + orbitSpeed * Math.cos(pos),\n\t\t\t...args.body\n\t\t} as B) // yeah, that's not pretty, but whatever\n\t}\n\n\tprivate velocityStep(deltaTime: number): void {\n\t\tfor(let i = 0; i < this.bodies.length; i++){\n\t\t\tconst body = this.bodies[i]!\n\t\t\tfor(let j = i + 1; j < this.bodies.length; j++){\n\t\t\t\tconst otherBody = this.bodies[j]!\n\t\t\t\tconst dx = otherBody.x - body.x\n\t\t\t\tconst dy = otherBody.y - body.y\n\t\t\t\tconst dist2 = (dx ** 2) + (dy ** 2)\n\t\t\t\tconst direction = Math.atan2(dy, dx)\n\n\t\t\t\tconst thisDeltaSpeed = ((G * otherBody.mass) / dist2) * deltaTime\n\t\t\t\tbody.xSpeed -= thisDeltaSpeed * Math.cos(direction)\n\t\t\t\tbody.ySpeed += thisDeltaSpeed * Math.sin(direction)\n\n\t\t\t\tconst otherDeltaSpeed = ((G * body.mass) / dist2) * deltaTime\n\t\t\t\totherBody.xSpeed -= otherDeltaSpeed * Math.cos(-direction)\n\t\t\t\totherBody.ySpeed += otherDeltaSpeed * Math.sin(-direction)\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected positionStep(deltaTime: number): void {\n\t\tfor(const body of this.bodies){\n\t\t\tbody.x += body.xSpeed * deltaTime\n\t\t\tbody.y += body.ySpeed * deltaTime\n\t\t}\n\t}\n\n}"],"names":["$5DUDw","parcelRequire","$5345fbd5ca3c0200$export$f22da7240b7add18","root","scene","$ilBaf","PlanetsSimulationWithGraphics","sun","addBody","x","y","xSpeed","ySpeed","mass","color","radius","outline","addOrbitingBody","orbitTarget","distance","body","orbitZoom","earth","cycledRequestAnimationFrame","svg","deltaTime","step","$6d25a2878a0e4597$export$519e26ca1f10de43","handler","onStop","stopped","prevCallTime","wrappedHandler","time","isConnected","delta","requestAnimationFrame","$7sHgZ","$4be702f97fd21592$export$2b44ee5eaf6ac4f2","constructor","zoom","this","simulation","$5GlZg","PlanetsSimulation","svgTag","tag","appendChild","updateSvgSize","$edTLw","onResize","parentElement","w","clientWidth","h","clientHeight","setAttribute","makeBodyElement","base","el","attrs","cx","cy","r","fill","stroke","args","Array","isArray","logicStepCount","i","bodies","findCenterOfMass","dx","dy","dist","Math","sqrt","angle","atan2","cos","sin","$5af6fdaf0a2d9731$export$45b39e67d4ce4921","callback","onMount","observer","ResizeObserver","entries","entry","target","console","log","observe","disconnect","ifInDom","$503fbb131173ea1c$var$G","$503fbb131173ea1c$export$28ea231c27d078e3","velocityStep","positionStep","push","map","reduce","a","b","orbitSpeed","reverse","pos","position","random","PI","length","j","otherBody","dist2","direction","thisDeltaSpeed","otherDeltaSpeed"],"version":3,"file":"planets.00d61749.js.map"}