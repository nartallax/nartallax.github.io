{"mappings":"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","sources":["src/sketches/particle_toy/particle_toy.ts","src/common/cycled_request_animation_frame.ts","src/common/gl_utils.ts","src/sketches/particle_toy/data_texture.ts","src/sketches/particle_toy/fps_counter.ts","src/sketches/particle_toy/shader.ts","src/sketches/particle_toy/shaders/utils.glsl","src/sketches/particle_toy/shaders/draw_fragment.glsl","src/sketches/particle_toy/shaders/draw_vertex.glsl","src/sketches/particle_toy/shaders/data_vertex.glsl","src/sketches/particle_toy/shaders/data_fragment.glsl","src/sketches/particle_toy/sprays.ts","src/sketches/particle_toy/walls.ts"],"sourcesContent":["import {cycledRequestAnimationFrame} from \"common/cycled_request_animation_frame\"\nimport {GlUtils} from \"common/gl_utils\"\nimport {DataTexture, DataTexturePair, DataTextureSingle, dataTextureSize, particlesCount} from \"sketches/particle_toy/data_texture\"\nimport {FpsCounter} from \"sketches/particle_toy/fps_counter\"\nimport {DataShader, DrawShader} from \"sketches/particle_toy/shader\"\nimport {particlesMovedPerSecond, sprays, uploadSprays, zeroSpray} from \"sketches/particle_toy/sprays\"\nimport {uploadWalls, walls, wallToRect} from \"sketches/particle_toy/walls\"\n\n// reading:\n// https://webglfundamentals.org/webgl/lessons/webgl-gpgpu.html\n// https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_draw_buffers\n\nexport function main(root: HTMLElement): void {\n\tconst canvas = document.createElement(\"canvas\")\n\t// TODO: handle resize\n\tconst rootSize = root.getBoundingClientRect()\n\tcanvas.setAttribute(\"width\", rootSize.width + \"\")\n\tcanvas.setAttribute(\"height\", rootSize.height + \"\")\n\tcanvas.style.cssText = \"position: absolute; top: 0; bottom: 0; left: 0; right: 0;\"\n\troot.appendChild(canvas)\n\n\tconst gl = canvas.getContext(\"webgl2\")!\n\t// TODO: check caps and presence of context\n\n\tconst idBuffer = makeIdBuffer(gl, particlesCount)\n\tconst squareBuffer = makeSquareBuffer(gl)\n\tconst coordsRange = {x: rootSize.width, y: rootSize.height}\n\t// const positionXTexture = new DataTexturePair(gl, makeDataArray(() => encodeFloat(Math.random() * coordsRange.x, coordsRange.x)))\n\t// const positionYTexture = new DataTexturePair(gl, makeDataArray(() => encodeFloat(Math.random() * coordsRange.y, coordsRange.y)))\n\t// const speedXTexture = new DataTexturePair(gl, makeDataArray(() => encodeFloat((Math.random() - 0.5) * 100, speedRange)))\n\t// const speedYTexture = new DataTexturePair(gl, makeDataArray(() => encodeFloat((Math.random() - 0.5) * 100, speedRange)))\n\tconst positionXTexture = new DataTexturePair(gl, makeDataArray())\n\tconst positionYTexture = new DataTexturePair(gl, makeDataArray())\n\tconst speedXTexture = new DataTexturePair(gl, makeDataArray())\n\tconst speedYTexture = new DataTexturePair(gl, makeDataArray())\n\tconst wallTexture = new DataTextureSingle(gl, makeDataArray(null, coordsRange), coordsRange)\n\n\tconst dataShader = new DataShader(gl)\n\tconst drawShader = new DrawShader(gl)\n\n\tsprays[0] = {\n\t\t...zeroSpray,\n\t\tx: coordsRange.x / 4,\n\t\ty: coordsRange.y / 2,\n\t\tdirection: -Math.PI / 4,\n\t\tintensity: particlesCount / 10000,\n\t\tpower: 100,\n\t\tspread: Math.PI / 16\n\t}\n\n\tsprays[1] = {\n\t\t...zeroSpray,\n\t\tx: coordsRange.x / 2 + 250,\n\t\ty: 150,\n\t\tdirection: -Math.PI * (3 / 4),\n\t\tintensity: particlesCount / 20000,\n\t\tpower: 50,\n\t\tspread: Math.PI / 2\n\t}\n\n\twalls[0] = {\n\t\tfrom: {x: coordsRange.x / 2 + 200, y: 200},\n\t\tto: {x: (coordsRange.x / 2) - 500 + 200, y: 200 + 500}\n\t}\n\n\tconst dataTextures = [positionXTexture, positionYTexture, speedXTexture, speedYTexture, wallTexture]\n\tdataShader.use()\n\tgl.uniform2f(dataShader.screenSize, coordsRange.x, coordsRange.y)\n\tgl.uniform1i(dataShader.positionX, 0)\n\tgl.uniform1i(dataShader.positionY, 1)\n\tgl.uniform1i(dataShader.speedX, 2)\n\tgl.uniform1i(dataShader.speedY, 3)\n\tgl.uniform1i(dataShader.walls, 4)\n\tgl.uniform1f(dataShader.gravity, 9.8) // TODO: config\n\tgl.uniform1f(dataShader.bounce, 0.5) // TODO: config\n\tuploadSprays(gl, dataShader) // TODO: config\n\tdrawWalls(root)\n\tuploadWalls(gl, wallTexture, coordsRange) // TODO: config\n\tconst dataShaderVao = GlUtils.makeBindVAO(gl)\n\tgl.bindBuffer(gl.ARRAY_BUFFER, squareBuffer)\n\tgl.enableVertexAttribArray(dataShader.vertex)\n\tgl.vertexAttribPointer(dataShader.vertex, 2, gl.FLOAT, false, 0, 0)\n\n\tconst drawTextures = [positionXTexture, positionYTexture]\n\tdrawShader.use()\n\tgl.uniform2f(drawShader.screenSize, coordsRange.x, coordsRange.y)\n\tgl.uniform1i(drawShader.positionX, 0)\n\tgl.uniform1i(drawShader.positionY, 1)\n\tconst drawVao = GlUtils.makeBindVAO(gl)\n\tgl.bindBuffer(gl.ARRAY_BUFFER, idBuffer)\n\tgl.enableVertexAttribArray(drawShader.id)\n\tgl.vertexAttribIPointer(drawShader.id, 1, gl.UNSIGNED_INT, 0, 0)\n\n\tlet particleMovementPointer = 0\n\n\tconst fpsCounter = new FpsCounter()\n\tfunction drawFrame(deltaTime: number): void {\n\t\tfpsCounter.recordFrame(deltaTime)\n\n\t\tconst firstMovedParticleIndex = particleMovementPointer\n\t\tconst lastMovedParticleIndex = firstMovedParticleIndex + Math.floor(particlesMovedPerSecond)\n\t\tparticleMovementPointer = lastMovedParticleIndex\n\t\tif(particleMovementPointer >= particlesCount){\n\t\t\tparticleMovementPointer = 0\n\t\t}\n\n\t\t// data calc step\n\t\twithFramebuffer(gl, () => {\n\t\t\tdataShader.use()\n\t\t\tgl.viewport(0, 0, dataTextureSize, dataTextureSize)\n\t\t\tgl.uniform1f(dataShader.deltaTime, deltaTime)\n\t\t\tgl.uniform1ui(dataShader.firstMovedParticleIndex, firstMovedParticleIndex)\n\t\t\tgl.uniform1ui(dataShader.lastMovedParticleIndex, lastMovedParticleIndex)\n\n\t\t\tbindTexturesToInputBuffers(gl, dataTextures)\n\t\t\tbindTexturesToOutputBuffers(gl, dataTextures.filter(x => x instanceof DataTexturePair))\n\n\t\t\tgl.bindVertexArray(dataShaderVao)\n\t\t\tgl.drawArrays(gl.TRIANGLES, 0, 6)\n\t\t})\n\n\t\tfor(const tex of dataTextures){\n\t\t\tif(tex instanceof DataTexturePair){\n\t\t\t\ttex.swap()\n\t\t\t}\n\t\t}\n\n\t\t// draw step\n\t\tdrawShader.use()\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null)\n\t\tgl.viewport(0, 0, rootSize.width, rootSize.height)\n\n\t\tbindTexturesToInputBuffers(gl, drawTextures)\n\n\t\tgl.bindVertexArray(drawVao)\n\t\tgl.drawArrays(gl.POINTS, 0, particlesCount)\n\t}\n\n\tcycledRequestAnimationFrame(deltaTime => {\n\t\tif(deltaTime > 250){\n\t\t\treturn\n\t\t}\n\n\t\tdrawFrame(deltaTime / 1000)\n\t})\n}\n\nconst wallElements: HTMLElement[] = []\nfunction drawWalls(root: HTMLElement): void {\n\tfor(const el of wallElements){\n\t\tel.remove()\n\t}\n\twallElements.length = 0\n\tconst pointSize = 10\n\n\tfor(const w of walls){\n\t\tconst rect = wallToRect(w)\n\n\t\tconst colors = [\"red\", \"green\", \"blue\", \"yellow\"]\n\n\t\tfunction addPoint(point: {x: number, y: number}, color: string): void {\n\t\t\tconst div = document.createElement(\"div\")\n\t\t\tdiv.style.cssText = `width:${pointSize}px; height: ${pointSize}px; position: absolute;top:${point.y - (pointSize / 2)}px;left: ${point.x - (pointSize / 2)}px;background-color: ${color}`\n\t\t\troot.appendChild(div)\n\t\t}\n\n\t\tlet i = 0\n\t\tfor(const point of rect){\n\t\t\taddPoint(point, colors[i++]!)\n\t\t}\n\t}\n}\n\nfunction makeDataArray(getValue: ((index: number) => number) | null = null, size: {x: number, y: number} = {x: dataTextureSize, y: dataTextureSize}): Uint32Array {\n\tconst result = new Uint32Array(size.x * size.y)\n\tif(getValue){\n\t\tfor(let i = 0; i < result.length; i++){\n\t\t\tresult[i] = getValue(i)\n\t\t}\n\t}\n\treturn result\n}\n\nfunction makeIdBuffer(gl: WebGL2RenderingContext, count: number): WebGLBuffer {\n\tconst ids = new Array(count).fill(0).map((_, i) => i)\n\tconst idBuffer = gl.createBuffer()\n\tif(!idBuffer){\n\t\tthrow new Error(\"Cannot create webgl buffer\")\n\t}\n\tgl.bindBuffer(gl.ARRAY_BUFFER, idBuffer)\n\tgl.bufferData(gl.ARRAY_BUFFER, new Uint32Array(ids), gl.STATIC_DRAW)\n\treturn idBuffer\n}\n\nfunction makeSquareBuffer(gl: WebGL2RenderingContext): WebGLBuffer {\n\tconst squareBuffer = gl.createBuffer()\n\tif(!squareBuffer){\n\t\tthrow new Error(\"Cannot create webgl buffer\")\n\t}\n\tgl.bindBuffer(gl.ARRAY_BUFFER, squareBuffer)\n\tgl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, 1]), gl.STATIC_DRAW)\n\treturn squareBuffer\n}\n\nfunction withFramebuffer<T>(gl: WebGL2RenderingContext, action: () => T): T {\n\ttry {\n\t\tconst fb = gl.createFramebuffer()\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, fb)\n\t\treturn action()\n\t} finally {\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null)\n\t}\n}\n\nfunction bindTexturesToOutputBuffers(gl: WebGL2RenderingContext, textures: DataTexture[]): void {\n\tconst drawBuffersInput: number[] = []\n\tfor(let i = 0; i < textures.length; i++){\n\t\tconst texture = textures[i]!\n\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i, gl.TEXTURE_2D, texture.receivingTexture, 0)\n\t\tdrawBuffersInput.push(gl.COLOR_ATTACHMENT0 + i)\n\t}\n\tgl.drawBuffers(drawBuffersInput)\n}\n\nfunction bindTexturesToInputBuffers(gl: WebGL2RenderingContext, textures: DataTexture[]): void {\n\tfor(let i = 0; i < textures.length; i++){\n\t\tconst texture = textures[i]!\n\t\tgl.activeTexture(gl.TEXTURE0 + i)\n\t\tgl.bindTexture(gl.TEXTURE_2D, texture.texture)\n\t}\n}","/** Wrapped RequestAnimationFrame, which cycles.\n * Passes time since previous frame as argument.\n * Returns stopper function */\nexport function cycledRequestAnimationFrame(handler: (delta: number) => void): () => void {\n\tlet stopped = false\n\n\tlet prevCallTime = 0\n\n\tconst wrappedHandler = (time: number) => {\n\t\tif(stopped){\n\t\t\treturn\n\t\t}\n\t\tconst delta = time - prevCallTime\n\t\tprevCallTime = time\n\t\trequestAnimationFrame(wrappedHandler)\n\t\thandler(delta)\n\t}\n\n\trequestAnimationFrame(wrappedHandler)\n\n\treturn () => stopped = true\n}","export type Uniform = ReturnType<WebGL2RenderingContext[\"getUniformLocation\"]>\nexport type Attrib = ReturnType<WebGL2RenderingContext[\"getAttribLocation\"]>\n\n// assorted utility functions for webgl\nexport namespace GlUtils {\n\n\texport function getGlContext(canvas: HTMLCanvasElement): WebGL2RenderingContext {\n\t\tconst gl = canvas.getContext(\"webgl2\")\n\t\tif(!gl){\n\t\t\tthrow new Error(\"No webgl2 available.\")\n\t\t}\n\t\tgl.enable(gl.BLEND)\n\t\tgl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\n\t\tgl.disable(gl.SCISSOR_TEST) // can be good, need further investigation\n\t\tgl.disable(gl.CULL_FACE)\n\t\tgl.disable(gl.DEPTH_TEST)\n\t\tgl.disable(gl.POLYGON_OFFSET_FILL)\n\t\tgl.disable(gl.STENCIL_TEST)\n\t\treturn gl\n\t}\n\n\texport function makeShader(gl: WebGL2RenderingContext, type: \"vertex\" | \"fragment\", code: string): WebGLShader {\n\t\tlet shader: WebGLShader | null = null\n\t\ttry {\n\t\t\tshader = gl.createShader(type === \"vertex\" ? gl.VERTEX_SHADER : gl.FRAGMENT_SHADER)\n\t\t\tif(!shader){\n\t\t\t\tthrow new Error(\"No shader is created of type \" + type)\n\t\t\t}\n\t\t\tgl.shaderSource(shader, code)\n\t\t\tgl.compileShader(shader)\n\n\t\t\tconst success = gl.getShaderParameter(shader, gl.COMPILE_STATUS)\n\t\t\tconst log = gl.getShaderInfoLog(shader)\n\t\t\tif(!success){\n\t\t\t\tconsole.log(code)\n\t\t\t\tthrow new Error(\"Failed to compile shader of type \" + type + \": \" + log)\n\t\t\t} else if(log){\n\t\t\t\tconsole.warn(\"WebGL \" + type + \" shader compile log: \", log)\n\t\t\t}\n\n\t\t\treturn shader\n\t\t} catch(e){\n\t\t\tgl.deleteShader(shader)\n\t\t\tthrow e\n\t\t}\n\t}\n\n\texport function makeProgram(gl: WebGL2RenderingContext, vertexShaderCode: string, fragmentShaderCode: string): {program: WebGLProgram, shaders: WebGLShader[]} {\n\t\tlet fragShader: WebGLShader | null = null\n\t\tlet vertShader: WebGLShader | null = null\n\t\tlet program: WebGLProgram | null = null\n\t\ttry {\n\t\t\tfragShader = makeShader(gl, \"fragment\", fragmentShaderCode)\n\t\t\tvertShader = makeShader(gl, \"vertex\", vertexShaderCode)\n\t\t\tprogram = gl.createProgram()\n\t\t\tif(!program){\n\t\t\t\tthrow new Error(\"No webgl program was created.\")\n\t\t\t}\n\n\t\t\tgl.attachShader(program, fragShader)\n\t\t\tgl.attachShader(program, vertShader)\n\t\t\tgl.linkProgram(program)\n\n\t\t\tconst success = gl.getProgramParameter(program, gl.LINK_STATUS)\n\t\t\tconst log = gl.getProgramInfoLog(program)\n\t\t\tif(!success){\n\t\t\t\tthrow new Error(\"Failed to link program: \" + log)\n\t\t\t} else if(log){\n\t\t\t\tconsole.warn(\"WebGL program log: \", log)\n\t\t\t}\n\n\t\t\treturn {program, shaders: [fragShader, vertShader]}\n\t\t} catch(e){\n\t\t\tfragShader && gl.deleteShader(fragShader)\n\t\t\tvertShader && gl.deleteShader(vertShader)\n\t\t\tprogram && gl.deleteProgram(program)\n\t\t\tthrow e\n\t\t}\n\t}\n\n\texport function setViewportSizeByCanvas(gl: WebGL2RenderingContext, canvas: HTMLCanvasElement): {width: number, height: number} {\n\t\tconst width = canvas.clientWidth * window.devicePixelRatio\n\t\tconst height = canvas.clientHeight * window.devicePixelRatio\n\t\t// why do we need this...? is this a lost useless part of some extremely outdated tutorial?\n\t\tcanvas.width = width\n\t\tcanvas.height = height\n\t\tgl.viewport(0, 0, width, height)\n\t\treturn {width, height}\n\t}\n\n\texport function loadTexture(gl: WebGL2RenderingContext, url: string): Promise<WebGLTexture> {\n\t\treturn new Promise((ok, bad) => {\n\t\t\tconst img = new Image()\n\t\t\timg.onload = () => {\n\t\t\t\ttry {\n\t\t\t\t\tconst tex = makeBindSetupTexture(gl)\n\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img)\n\t\t\t\t\tgl.generateMipmap(gl.TEXTURE_2D)\n\t\t\t\t\tok(tex)\n\t\t\t\t} catch(e){\n\t\t\t\t\tbad(e)\n\t\t\t\t}\n\t\t\t}\n\t\t\timg.onerror = () => bad(new Error(\"Failed to load texture: \" + url))\n\t\t\timg.src = url\n\t\t})\n\t}\n\n\tfunction makeBindSetupTexture(gl: WebGL2RenderingContext): WebGLTexture {\n\t\tconst tex = gl.createTexture()\n\t\tif(!tex){\n\t\t\tthrow new Error(\"No texture was created.\")\n\t\t}\n\t\tgl.activeTexture(gl.TEXTURE0)\n\t\tgl.bindTexture(gl.TEXTURE_2D, tex)\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR)\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST)\n\t\treturn tex\n\t}\n\n\tconst squareVertexData: readonly number[] = [0, 0, 1, 0, 1, 1, 0, 1]\n\tconst squareIndexData: readonly number[] = [0, 1, 2, 0, 2, 3]\n\n\t/** Make vertex buffer that contains 2d coordinates for a square with side length = 1 */\n\texport function makeSquareVertexBuffer(gl: WebGL2RenderingContext): WebGLBuffer {\n\t\tconst buffer = makeBindBuffer(gl, gl.ARRAY_BUFFER)\n\t\tgl.bufferData(gl.ARRAY_BUFFER, new Float32Array(squareVertexData), gl.STATIC_DRAW)\n\t\treturn buffer\n\t}\n\n\t/** Make corresponding index buffer for vertex from `makeSquareVertexBuffer()` */\n\texport function makeSquareIndexBuffer(gl: WebGL2RenderingContext): WebGLBuffer {\n\t\tconst buffer = makeBindBuffer(gl, gl.ELEMENT_ARRAY_BUFFER)\n\t\tgl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(squareIndexData), gl.STATIC_DRAW)\n\t\treturn buffer\n\t}\n\n\texport function makeBindBuffer(gl: WebGL2RenderingContext, target: GLenum): WebGLBuffer {\n\t\tconst buf = gl.createBuffer()\n\t\tif(!buf){\n\t\t\tthrow new Error(\"Buffer was not created.\")\n\t\t}\n\t\tgl.bindBuffer(target, buf)\n\t\treturn buf\n\t}\n\n\texport function makeBindVAO(gl: WebGL2RenderingContext): WebGLVertexArrayObject {\n\t\tconst vao = gl.createVertexArray()\n\t\tif(!vao){\n\t\t\tthrow new Error(\"VAO was not created.\")\n\t\t}\n\t\tgl.bindVertexArray(vao)\n\t\treturn vao\n\t}\n\n}","export const particlesCount = 128000\nexport const dataTextureSize = 2 ** Math.ceil(Math.log2(Math.ceil(Math.sqrt(particlesCount))))\n\nexport const speedRange = 5000\nexport const angleRange = 3600\n\nexport function encodeFloat(value: number, range: number): number {\n\treturn Math.floor((value / range) * 0x7fffffff) + 0x7fffffff\n}\n\nfunction createDataTexture(gl: WebGL2RenderingContext, data: Uint32Array, size: {x: number, y: number}): WebGLTexture {\n\tconst tex = gl.createTexture()\n\tif(!tex){\n\t\tthrow new Error(\"No texture was created\")\n\t}\n\tuploadTextureData(gl, tex, data, size)\n\treturn tex\n}\n\nfunction uploadTextureData(gl: WebGL2RenderingContext, tex: WebGLTexture, data: Uint32Array, size: {x: number, y: number}): void {\n\tgl.bindTexture(gl.TEXTURE_2D, tex)\n\tgl.texImage2D(\n\t\tgl.TEXTURE_2D,\n\t\t0, // mip level\n\t\tgl.R32UI, // internal format\n\t\tsize.x, // width\n\t\tsize.y, // height\n\t\t0, // border\n\t\tgl.RED_INTEGER, // format\n\t\tgl.UNSIGNED_INT, // type\n\t\tdata,\n\t\t0\n\t)\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST)\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST)\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\n}\n\nexport type DataTexture = DataTextureSingle | DataTexturePair\n\nexport class DataTextureSingle {\n\n\tprivate readonly _texture: WebGLTexture\n\n\tconstructor(gl: WebGL2RenderingContext, data: Uint32Array, private readonly size: {x: number, y: number} = {x: dataTextureSize, y: dataTextureSize}) {\n\t\tthis._texture = createDataTexture(gl, data, size)\n\t}\n\n\tget texture(): WebGLTexture {\n\t\treturn this._texture\n\t}\n\n\tget receivingTexture(): WebGLTexture {\n\t\treturn this._texture\n\t}\n\n\tupload(gl: WebGL2RenderingContext, data: Uint32Array): void {\n\t\tuploadTextureData(gl, this.texture, data, this.size)\n\t}\n\n}\n\nexport class DataTexturePair {\n\tprivate readonly a: WebGLTexture\n\tprivate readonly b: WebGLTexture\n\tprivate aIsActive = true\n\n\tconstructor(gl: WebGL2RenderingContext, data: Uint32Array, size: {x: number, y: number} = {x: dataTextureSize, y: dataTextureSize}) {\n\t\tthis.a = createDataTexture(gl, data, size)\n\t\tthis.b = createDataTexture(gl, data, size)\n\t}\n\n\tget texture(): WebGLTexture {\n\t\treturn this.aIsActive ? this.a : this.b\n\t}\n\n\tget receivingTexture(): WebGLTexture {\n\t\treturn this.aIsActive ? this.b : this.a\n\t}\n\n\tswap(): void {\n\t\tthis.aIsActive = !this.aIsActive\n\t}\n}","export class FpsCounter {\n\tprivate count = 0\n\tprivate time = 0\n\n\tconstructor(private readonly reportFreq = 3) {}\n\n\trecordFrame(deltaTime: number): void {\n\t\tthis.time += deltaTime\n\t\tthis.count++\n\t\twhile(this.time > this.reportFreq){\n\t\t\tthis.time -= this.reportFreq\n\t\t\tconsole.log(`FPS: ${this.count / this.reportFreq}`)\n\t\t\tthis.count = 0\n\t\t}\n\t}\n}","import glslUtils from \"./shaders/utils.glsl\"\nimport drawFragmentShaderCode from \"./shaders/draw_fragment.glsl\"\nimport drawVertexShaderCode from \"./shaders/draw_vertex.glsl\"\nimport dataVertexShaderCode from \"./shaders/data_vertex.glsl\"\nimport dataFragmentShaderCode from \"./shaders/data_fragment.glsl\"\nimport {GlUtils} from \"common/gl_utils\"\nimport {dataTextureSize} from \"sketches/particle_toy/data_texture\"\n\nfunction addUtils(code: string): string {\n\treturn `#version 300 es\\n#define DATA_TEXTURE_SIZE ${dataTextureSize}.0\\n` + glslUtils + \"\\n\" + code\n}\n\nexport abstract class Shader {\n\n\tprotected readonly program: WebGLProgram\n\tprotected readonly shaders: readonly WebGLShader[]\n\n\tconstructor(protected readonly gl: WebGL2RenderingContext, vertexCode: string, fragmentCode: string) {\n\t\tconst {program, shaders} = GlUtils.makeProgram(gl,\n\t\t\taddUtils(vertexCode),\n\t\t\taddUtils(fragmentCode)\n\t\t)\n\t\tthis.program = program\n\t\tthis.shaders = shaders\n\t}\n\n\tuse(): void {\n\t\tthis.gl.useProgram(this.program)\n\t}\n\n\tdelete(): void {\n\t\tthis.gl.deleteProgram(this.program)\n\t\tfor(const shader of this.shaders){\n\t\t\tthis.gl.deleteShader(shader)\n\t\t}\n\t}\n\n}\n\ntype Attrib = number\ntype Uniform = WebGLUniformLocation | null\n\nexport class DrawShader extends Shader {\n\n\treadonly positionX: Uniform\n\treadonly positionY: Uniform\n\treadonly id: Attrib\n\treadonly screenSize: Uniform\n\n\tconstructor(gl: WebGL2RenderingContext) {\n\t\tsuper(gl, drawVertexShaderCode, drawFragmentShaderCode)\n\t\tthis.positionX = gl.getUniformLocation(this.program, \"positionX\")\n\t\tthis.positionY = gl.getUniformLocation(this.program, \"positionY\")\n\t\tthis.id = gl.getAttribLocation(this.program, \"id\")\n\t\tthis.screenSize = gl.getUniformLocation(this.program, \"screenSize\")\n\t}\n}\n\nexport class DataShader extends Shader {\n\n\t// textures\n\treadonly positionX: Uniform\n\treadonly positionY: Uniform\n\treadonly speedX: Uniform\n\treadonly speedY: Uniform\n\n\t// uniforms\n\treadonly screenSize: Uniform\n\treadonly deltaTime: Uniform\n\treadonly gravity: Uniform\n\treadonly bounce: Uniform\n\treadonly firstMovedParticleIndex: Uniform\n\treadonly lastMovedParticleIndex: Uniform\n\treadonly sprayX: Uniform\n\treadonly sprayY: Uniform\n\treadonly sprayDirection: Uniform\n\treadonly sprayPower: Uniform\n\treadonly spraySpread: Uniform\n\treadonly sprayIntensity: Uniform\n\treadonly walls: Uniform\n\n\t// attribs\n\treadonly vertex: Attrib\n\n\tconstructor(gl: WebGL2RenderingContext) {\n\t\tsuper(gl, dataVertexShaderCode, dataFragmentShaderCode)\n\t\tthis.screenSize = gl.getUniformLocation(this.program, \"screenSize\")\n\t\tthis.positionX = gl.getUniformLocation(this.program, \"positionX\")\n\t\tthis.positionY = gl.getUniformLocation(this.program, \"positionY\")\n\t\tthis.speedX = gl.getUniformLocation(this.program, \"speedX\")\n\t\tthis.speedY = gl.getUniformLocation(this.program, \"speedY\")\n\t\tthis.deltaTime = gl.getUniformLocation(this.program, \"deltaTime\")\n\t\tthis.vertex = gl.getAttribLocation(this.program, \"vertex\")\n\t\tthis.firstMovedParticleIndex = gl.getUniformLocation(this.program, \"firstMovedParticleIndex\")\n\t\tthis.lastMovedParticleIndex = gl.getUniformLocation(this.program, \"lastMovedParticleIndex\")\n\t\tthis.gravity = gl.getUniformLocation(this.program, \"gravity\")\n\t\tthis.bounce = gl.getUniformLocation(this.program, \"bounce\")\n\t\tthis.sprayX = gl.getUniformLocation(this.program, \"sprayX\")\n\t\tthis.sprayY = gl.getUniformLocation(this.program, \"sprayY\")\n\t\tthis.sprayDirection = gl.getUniformLocation(this.program, \"sprayDirection\")\n\t\tthis.sprayPower = gl.getUniformLocation(this.program, \"sprayPower\")\n\t\tthis.spraySpread = gl.getUniformLocation(this.program, \"spraySpread\")\n\t\tthis.sprayIntensity = gl.getUniformLocation(this.program, \"sprayIntensity\")\n\t\tthis.walls = gl.getUniformLocation(this.program, \"walls\")\n\t}\n\n}","precision mediump float;\nprecision mediump usampler2D;\n\n#define SPEED_RANGE 5000.0\n#define ANGLE_RANGE 3600.0\n#define INT_RANGEU 0x7fffffffu\n#define INT_RANGEF float(INT_RANGEU)\n#define PI 3.14159265358979323846\n\nfloat decodeFloat(uint value, float range){\n  return (float(value) / INT_RANGEF) * range;\n}\n\nuint encodeFloat(float value, float range){\n  return uint(((value / range) * INT_RANGEF) + INT_RANGEF);\n}\n\nuvec2 getUintPairByCoords(usampler2D texX, usampler2D texY, vec2 coords){\n  return uvec2(uint(texture(texX, coords).x), uint(texture(texY, coords).x));\n}\n\nuvec2 getUintPairByIndex(usampler2D texX, usampler2D texY, uint index){\n  float findex = float(index);\n  float y = floor(findex / DATA_TEXTURE_SIZE);\n  float x = mod(findex, DATA_TEXTURE_SIZE);\n  vec2 texcoord = (vec2(x, y) + 0.5) / DATA_TEXTURE_SIZE;\n  return uvec2(texture(texX, texcoord).x, texture(texY, texcoord).x);\n}\n\n#define getFloatPairByCoords(texX, texY, coords, range) (((vec2(texture(texX, coords).x, texture(texY, coords).x) - INT_RANGEF) / INT_RANGEF) * range)\n#define getFloatPairByIndex(texX, texY, index, range) (((vec2(getUintPairByIndex(texX, texY, index)) - INT_RANGEF) / INT_RANGEF) * range)\n\nvec4 absCoordsIntoScreenCoords(vec2 coords, vec2 screenSize){\n  return vec4(((coords / screenSize) * 2.0) - 1.0, 0, 1);\n}\n\nuint fragCoordToIndex(vec2 fragCoord){\n  return uint(fragCoord.x) + uint(fragCoord.y * DATA_TEXTURE_SIZE);\n}\n\n// A single iteration of Bob Jenkins' One-At-A-Time hashing algorithm.\nuint hash(uint x) {\n    x += ( x << 10u );\n    x ^= ( x >>  6u );\n    x += ( x <<  3u );\n    x ^= ( x >> 11u );\n    x += ( x << 15u );\n    return x;\n}\n\n#define normalizeRandomUint(value) float(value % 0xffffffu) / float(0xffffffu)","out vec4 outColor;\n\nvoid main() {\n\toutColor = vec4(1, 1, 1, 1);\n}","uniform usampler2D positionX;\nuniform usampler2D positionY;\nuniform vec2 screenSize;\nin uint id;\n\nvoid main(){\n  vec2 absCoords = getFloatPairByIndex(positionX, positionY, id, screenSize);\n  vec4 screenCoords = absCoordsIntoScreenCoords(absCoords, screenSize);\n\tgl_Position = screenCoords;\n  gl_PointSize = 1.0;\n}\n","in vec4 vertex;\nvoid main() {\n\tgl_Position = vertex;\n}","uniform vec2 screenSize;\nuniform float deltaTime;\n\nuniform uint firstMovedParticleIndex;\nuniform uint lastMovedParticleIndex;\n\nuniform float gravity;\nuniform float bounce;\nuniform vec4 sprayX;\nuniform vec4 sprayY;\nuniform vec4 sprayDirection;\nuniform vec4 sprayPower;\nuniform vec4 spraySpread;\nuniform uvec4 sprayIntensity;\n\nuniform usampler2D positionX;\nuniform usampler2D positionY;\nuniform usampler2D speedX;\nuniform usampler2D speedY;\nuniform usampler2D walls;\n\nlayout(location = 0) out uint outPosX;\nlayout(location = 1) out uint outPosY;\nlayout(location = 2) out uint outSpeedX;\nlayout(location = 3) out uint outSpeedY;\n\n#define moveBySpray(sprayIndex) moveBySprayFn(position, speed, index, vec2(sprayX[sprayIndex], screenSize.y - sprayY[sprayIndex]), sprayDirection[sprayIndex], sprayPower[sprayIndex], spraySpread[sprayIndex])\n\nvoid moveBySprayFn(inout vec2 position, inout vec2 speed, uint index, vec2 sprayPosition, float direction, float power, float spread){\n\tposition = sprayPosition;\n\tuint rnd = hash(index);\n\tdirection += spread * (normalizeRandomUint(rnd) - 0.5);\n\tpower += (power / 10.0) * (normalizeRandomUint(rnd * 134u) - 0.5);\n\tspeed = vec2(cos(direction) * power, sin(direction) * power);\n}\n\nvoid main(){\n\tvec2 texcoord = gl_FragCoord.xy / DATA_TEXTURE_SIZE;\n\tuint index = fragCoordToIndex(gl_FragCoord.xy);\n\n\tvec2 position = getFloatPairByCoords(positionX, positionY, texcoord, screenSize);\n\tvec2 speed = getFloatPairByCoords(speedX, speedY, texcoord, SPEED_RANGE);\n\n\tuint sprayOffset = index - firstMovedParticleIndex;\n\tif(sprayOffset >= 0u){\n\t\tif(sprayOffset < sprayIntensity[0]){\n\t\t\tmoveBySpray(0);\n\t\t} else {\n\t\t\tsprayOffset -= sprayIntensity[0];\n\t\t\tif(sprayOffset < sprayIntensity[1]){\n\t\t\t\tmoveBySpray(1);\n\t\t\t} else {\n\t\t\t\tsprayOffset -= sprayIntensity[1];\n\t\t\t\tif(sprayOffset < sprayIntensity[2]){\n\t\t\t\t\tmoveBySpray(2);\n\t\t\t\t} else {\n\t\t\t\t\tsprayOffset -= sprayIntensity[2];\n\t\t\t\t\tif(sprayOffset < sprayIntensity[3]){\n\t\t\t\t\t\tmoveBySpray(3);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tposition = position + (speed * deltaTime);\n\tif(position.x < 0.0){\n\t\tposition.x = 0.01;\n\t\tspeed.x = -speed.x * bounce;\n\t} else if(position.x > screenSize.x){\n\t\tposition.x = screenSize.x - 0.01;\n\t\tspeed.x = -speed.x * bounce;\n\t}\n\tif(position.y < 0.0){\n\t\tposition.y = 0.01;\n\t\tspeed.y = -speed.y * bounce;\n\t} else if(position.y > screenSize.y){\n\t\tposition.y = screenSize.y - 0.01;\n\t\tspeed.y = -speed.y * bounce;\n\t}\n\n\tspeed.y -= gravity * deltaTime;\n\n\tvec2 wallPos = vec2(position.x, screenSize.y - position.y) / screenSize;\n\tuint wall = texture(walls, wallPos).x;\n\tif(wall != 0u){\n\t\tfloat speedAbs = sqrt(speed.x * speed.x + speed.y * speed.y);\n\t\tfloat speedDirection = atan(speed.y, speed.x) + PI;\n\t\tfloat wallNormal = decodeFloat(wall, ANGLE_RANGE) + PI;\n\t\t// wallDir = -45deg, speedDir = 0deg, diff = -45deg, dir = 90deg\n\n\t\t// rotating coord system; that way wall normal will always be 0\n\t\tspeedDirection -= wallNormal;\n\t\tspeedDirection = PI - speedDirection;\n\t\t// speedAbs *= bounce; // FIXME: it's not working that way!\n\t\tspeed.x = speedAbs * cos(speedDirection);\n\t\tspeed.y = speedAbs * sin(speedDirection);\n\t\t// this is (bad) attempt to avert a problem\n\t\t// if a particle don't have enough speed to leave the wall in time, it's getting caught in the wall\n\t\t// and moves in weird pattern\n\t\t// so we move particle a little and hope that it won't be that bad\n\t\t// (it's working, but it is also not a proper solution)\n\t\tposition += (speed * deltaTime * 2.0) / max(bounce, 0.1);\n\t}\n\t\n\toutPosX = encodeFloat(position.x, screenSize.x);\n    outPosY = encodeFloat(position.y, screenSize.y);\n    outSpeedX = encodeFloat(speed.x, SPEED_RANGE);\n    outSpeedY = encodeFloat(speed.y, SPEED_RANGE);\n}","import {Uniform} from \"common/gl_utils\"\nimport {DataShader} from \"sketches/particle_toy/shader\"\n\nexport type Spray = {\n\tx: number\n\ty: number\n\tdirection: number\n\tpower: number\n\tspread: number\n\tintensity: number // particles per frame\n}\n\nexport const zeroSpray: Spray = {x: 0, y: 0, direction: 0, power: 0, spread: 0, intensity: 0}\nexport const sprays: Spray[] = [{...zeroSpray}, {...zeroSpray}, {...zeroSpray}, {...zeroSpray}]\n\nfunction uploadFloatSprayField(gl: WebGL2RenderingContext, uniform: Uniform, field: keyof Spray) {\n\tgl.uniform4f(uniform, sprays[0]![field], sprays[1]![field], sprays[2]![field], sprays[3]![field])\n}\n\nfunction uploadUintSprayField(gl: WebGL2RenderingContext, uniform: Uniform, field: keyof Spray) {\n\tgl.uniform4ui(uniform, sprays[0]![field], sprays[1]![field], sprays[2]![field], sprays[3]![field])\n}\n\nexport let particlesMovedPerSecond = 0\nexport function uploadSprays(gl: WebGL2RenderingContext, shader: DataShader): void {\n\tparticlesMovedPerSecond = sprays\n\t\t.filter(spray => spray.x !== 0 && spray.y !== 0)\n\t\t.map(spray => spray.intensity)\n\t\t.reduce((a, b) => a + b, 0)\n\n\tuploadFloatSprayField(gl, shader.sprayX, \"x\")\n\tuploadFloatSprayField(gl, shader.sprayY, \"y\")\n\tuploadFloatSprayField(gl, shader.sprayDirection, \"direction\")\n\tuploadFloatSprayField(gl, shader.sprayPower, \"power\")\n\tuploadFloatSprayField(gl, shader.spraySpread, \"spread\")\n\tuploadUintSprayField(gl, shader.sprayIntensity, \"intensity\")\n}","import {angleRange, DataTextureSingle, encodeFloat} from \"sketches/particle_toy/data_texture\"\n\nexport type Point2D = {\n\tx: number\n\ty: number\n}\n\nexport type Wall = {\n\tfrom: Point2D\n\tto: Point2D\n}\n\ntype Rect = [Point2D, Point2D, Point2D, Point2D]\n\nexport const walls: Wall[] = []\n\nexport const wallThickness = 50\n\nfunction getWallAngle(wall: Wall): number {\n\tconst dy = wall.from.y - wall.to.y\n\tconst dx = wall.from.x - wall.to.x\n\treturn Math.atan2(dy, dx)\n}\n\nexport function wallToRect(wall: Wall): Rect {\n\tconst angle = getWallAngle(wall)\n\tconsole.log(\"wall angle: \" + angle)\n\tconst cos = Math.cos(angle + (Math.PI / 2))\n\tconst sin = Math.sin(angle + (Math.PI / 2))\n\tconst offset = wallThickness / 2\n\treturn [\n\t\t{x: wall.from.x - offset * cos, y: wall.from.y - offset * sin},\n\t\t{x: wall.from.x + offset * cos, y: wall.from.y + offset * sin},\n\t\t{x: wall.to.x + offset * cos, y: wall.to.y + offset * sin},\n\t\t{x: wall.to.x - offset * cos, y: wall.to.y - offset * sin}\n\t]\n}\n\nfunction fillWall(data: {[k: number]: number}, width: number, wall: Wall): void {\n\tlet wallAngleValue = getWallAngle(wall)\n\tif(wallAngleValue === 0){\n\t\twallAngleValue = 0.1\n\t}\n\tconsole.log(wall)\n\tfillRect(data, width, wallToRect(wall), encodeFloat(wallAngleValue, angleRange))\n}\n\nclass IntLine {\n\tprivate readonly offset: number\n\tprivate readonly k: number\n\tprivate readonly lowY: number\n\tprivate readonly highY: number\n\n\tconstructor(from: Point2D, to: Point2D) {\n\t\tconst dx = from.x - to.x\n\t\tconst dy = from.y - to.y\n\t\tthis.k = dx / dy\n\t\tthis.offset = from.x - (from.y * this.k)\n\t\tthis.lowY = Math.floor(Math.min(from.y, to.y))\n\t\tthis.highY = Math.floor(Math.max(from.y, to.y))\n\t}\n\n\txByY(y: number): number | null {\n\t\tif(y < this.lowY || y > this.highY){\n\t\t\treturn null\n\t\t}\n\t\treturn Math.floor(this.offset + this.k * y)\n\t}\n}\n\nfunction fillRect(data: {[k: number]: number}, width: number, rect: Rect, value: number): void {\n\tlet count = 0\n\tconst minY = Math.floor(rect.map(({y}) => y).reduce((a, b) => Math.min(a, b), Number.MAX_SAFE_INTEGER))\n\tconst maxY = Math.floor(rect.map(({y}) => y).reduce((a, b) => Math.max(a, b), 0))\n\tconst lines = [\n\t\tnew IntLine(rect[0], rect[1]),\n\t\tnew IntLine(rect[1], rect[2]),\n\t\tnew IntLine(rect[2], rect[3]),\n\t\tnew IntLine(rect[3], rect[0])\n\t]\n\tlet lineOffset = minY * width\n\tfor(let y = minY; y <= maxY; y++){\n\t\tlet minX = Number.MAX_SAFE_INTEGER\n\t\tlet maxX = -Number.MAX_SAFE_INTEGER\n\t\tfor(const line of lines){\n\t\t\tconst x = line.xByY(y)\n\t\t\tif(x !== null){\n\t\t\t\tminX = Math.min(minX, x)\n\t\t\t\tmaxX = Math.max(maxX, x)\n\t\t\t}\n\t\t}\n\t\tif(minX === Number.MAX_SAFE_INTEGER || maxX === -Number.MAX_SAFE_INTEGER){\n\t\t\tthrow new Error(`Boundaries not found for y = ${y}! Rect is ${JSON.stringify(rect)}, minX = ${minX}, maxX = ${maxX}, lines are ${JSON.stringify(lines)}`)\n\t\t}\n\t\tfor(let x = minX; x <= maxX; x++){\n\t\t\tcount++\n\t\t\tdata[lineOffset + x] = value\n\t\t}\n\t\tlineOffset += width\n\t}\n\tconsole.log(`Filled ${count} cells with ${value} (${JSON.stringify(rect)})`)\n}\n\nexport function uploadWalls(gl: WebGL2RenderingContext, texture: DataTextureSingle, screenSize: {x: number, y: number}): void {\n\tconst data = new Uint32Array(screenSize.x * screenSize.y) // TODO: experiment with smaller bit widths and smaller texture resolution\n\twalls.forEach(wall => {\n\t\tfillWall(data, screenSize.x, wall)\n\t})\n\ttexture.upload(gl, data)\n}"],"names":["$5DUDw","parcelRequire","$0f868be849c07a1e$export$f22da7240b7add18","root","canvas","document","createElement","rootSize","getBoundingClientRect","setAttribute","width","height","style","cssText","appendChild","gl","getContext","idBuffer","count","ids","Array","fill","map","_","i","createBuffer","Error","bindBuffer","ARRAY_BUFFER","bufferData","Uint32Array","STATIC_DRAW","$0f868be849c07a1e$var$makeIdBuffer","$3ekh2","particlesCount","squareBuffer","Float32Array","$0f868be849c07a1e$var$makeSquareBuffer","coordsRange","x","y","positionXTexture","DataTexturePair","$0f868be849c07a1e$var$makeDataArray","positionYTexture","speedXTexture","speedYTexture","wallTexture","DataTextureSingle","dataShader","$5udHq","DataShader","drawShader","DrawShader","$dbJCa","sprays","zeroSpray","direction","Math","PI","intensity","power","spread","$34KeV","walls","from","to","dataTextures","use","uniform2f","screenSize","uniform1i","positionX","positionY","speedX","speedY","uniform1f","gravity","bounce","uploadSprays","el","$0f868be849c07a1e$var$wallElements","remove","length","pointSize","w","rect","wallToRect","colors","addPoint","point","color","div","$0f868be849c07a1e$var$drawWalls","uploadWalls","dataShaderVao","$d4DhX","GlUtils","makeBindVAO","enableVertexAttribArray","vertex","vertexAttribPointer","FLOAT","drawTextures","drawVao","id","vertexAttribIPointer","UNSIGNED_INT","particleMovementPointer","fpsCounter","$hf9LN","FpsCounter","cycledRequestAnimationFrame","deltaTime","recordFrame","firstMovedParticleIndex","lastMovedParticleIndex","floor","particlesMovedPerSecond","action","fb","createFramebuffer","bindFramebuffer","FRAMEBUFFER","$0f868be849c07a1e$var$withFramebuffer","viewport","dataTextureSize","uniform1ui","$0f868be849c07a1e$var$bindTexturesToInputBuffers","textures","drawBuffersInput","texture","framebufferTexture2D","COLOR_ATTACHMENT0","TEXTURE_2D","receivingTexture","push","drawBuffers","$0f868be849c07a1e$var$bindTexturesToOutputBuffers","filter","bindVertexArray","drawArrays","TRIANGLES","tex","swap","POINTS","drawFrame","getValue","size","result","activeTexture","TEXTURE0","bindTexture","$6d25a2878a0e4597$export$519e26ca1f10de43","handler","stopped","prevCallTime","wrappedHandler","time","delta","requestAnimationFrame","$c2a4196f056f95b3$export$c925bebd88462bbe","makeShader","type","code","shader","createShader","VERTEX_SHADER","FRAGMENT_SHADER","shaderSource","compileShader","success","getShaderParameter","COMPILE_STATUS","log","getShaderInfoLog","console","warn","e","deleteShader","getGlContext","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","disable","SCISSOR_TEST","CULL_FACE","DEPTH_TEST","POLYGON_OFFSET_FILL","STENCIL_TEST","makeProgram","vertexShaderCode","fragmentShaderCode","fragShader","vertShader","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","shaders","deleteProgram","setViewportSizeByCanvas","clientWidth","window","devicePixelRatio","clientHeight","loadTexture","url","Promise","ok","bad","img","Image","onload","createTexture","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_LINEAR","TEXTURE_MAG_FILTER","NEAREST","makeBindSetupTexture","texImage2D","RGBA","UNSIGNED_BYTE","generateMipmap","onerror","src","squareVertexData","squareIndexData","makeBindBuffer","target","buf","makeSquareVertexBuffer","buffer","makeSquareIndexBuffer","ELEMENT_ARRAY_BUFFER","Uint16Array","vao","createVertexArray","$5aa7663b69bdf641$export$7b09a2fd87fa5952","$5aa7663b69bdf641$export$35b20dd8e412bf0c","ceil","log2","sqrt","$5aa7663b69bdf641$export$66a282d1f36da239","$5aa7663b69bdf641$export$afd12f26a59e9206","value","range","$5aa7663b69bdf641$var$createDataTexture","data","$5aa7663b69bdf641$var$uploadTextureData","R32UI","RED_INTEGER","$5aa7663b69bdf641$export$ef066b074307e589","constructor","this","_texture","upload","$5aa7663b69bdf641$export$b493e764abca6954","aIsActive","a","b","$0dd95076cf36ee24$export$b25b355fca609f64","reportFreq","$aAGU0","$8a0425e1a044e327$var$addUtils","$parcel$interopDefault","$8a0425e1a044e327$export$462bb059fed9d9e5","vertexCode","fragmentCode","useProgram","delete","$8a0425e1a044e327$export$c00e9721819f822c","super","$72NEL","$6daLX","getUniformLocation","getAttribLocation","$8a0425e1a044e327$export$9d5a08083c70a55e","$5W6s1","$8qbFu","sprayX","sprayY","sprayDirection","sprayPower","spraySpread","sprayIntensity","module","exports","$4da073c35f6e776e$export$dce77d77463cc696","$4da073c35f6e776e$export$4841f336172d2a28","$4da073c35f6e776e$var$uploadFloatSprayField","uniform","field","uniform4f","$4da073c35f6e776e$export$b4f52307a400e07c","$4da073c35f6e776e$export$d66fa27e5f3ec244","spray","reduce","uniform4ui","$4da073c35f6e776e$var$uploadUintSprayField","$96d4f46940c5f8d3$export$fbbd7dfed5e83db7","$96d4f46940c5f8d3$var$getWallAngle","wall","dy","dx","atan2","$96d4f46940c5f8d3$export$4969ab4c2ff2c137","angle","cos","sin","offset","$96d4f46940c5f8d3$export$af00afa5e2f0adcc","$96d4f46940c5f8d3$var$fillWall","wallAngleValue","minY","min","Number","MAX_SAFE_INTEGER","maxY","max","lines","$96d4f46940c5f8d3$var$IntLine","lineOffset","minX","maxX","line","xByY","JSON","stringify","x1","$96d4f46940c5f8d3$var$fillRect","encodeFloat","angleRange","k","lowY","highY","$96d4f46940c5f8d3$export$8172e4e13c18fe42","forEach"],"version":3,"file":"particle_toy.8afdab16.js.map"}