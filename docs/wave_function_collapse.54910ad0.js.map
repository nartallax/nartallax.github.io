{"mappings":"kUAAA,IAAAA,EAAAC,EAAA,S,2FAUO,SAASC,EAAKC,GACpB,MAAMC,EAAe,IAAI,EAAAC,EAAAC,cAAqB,CAC7CC,QAAS,CAAC,QAAU,SAAU,SAAU,SAAU,SAAU,QAAU,SAAU,OAChFC,aAAc,QACdC,OAAQ,GACRC,MAAO,GACPC,MAAO,KAGFC,EAAU,IAAI,EAAAC,EAAAC,mBAAkB,IAEtCX,EAAKY,aAAY,EAAAC,EAAAC,KAAI,CACpBC,MAAOC,EAAA,gCACL,EACF,EAAAH,EAAAC,KAAI,CACHb,EAAaD,MACb,EAAAa,EAAAC,KAAI,CAACA,IAAK,SAAUG,QAOtB,WACC,MAAMC,EAASjB,EAAakB,aAC5BC,QAAQC,IAAIC,KAAKC,UAAUL,IAC3B,MAAMM,GAAS,EAAAC,EAAAC,sBAAqB,CACnCC,MAAM,EACNC,QAAQ,EACRC,aAAcX,EACdY,YAAa,EACbC,WAAY,MACZC,WAAY,CAACzB,MAAO,GAAID,OAAQ,MAEjCG,EAAQwB,KAAKT,GAEb3B,EAAAqC,YAAYC,QACZtC,EAAAqC,YAAYE,OACb,GAtBqC,CAAC,gBAErC3B,EAAQT,QAGTC,EAAaoC,SAASC,EAkBvB,C,yEC4CO,MAAMC,EAAc,IA/E3B,MAESvC,KAAcwC,KAAKC,UAAU,MAC7BC,aAAsBF,KAAKxC,KAC3B2C,cAAwC,CAAC,EAEzCF,UAAUG,GACjB,MAAO,CACNC,UAAW,CAAC,EAAGD,OAAQA,EACvBE,WAAW,EAAIC,QAAS,EACxBC,WAAY,EAEd,CAEAC,WAAWC,GACV,IAAIC,EAAYX,KAAKE,aAAaG,UAAUK,GACxCC,IACHA,EAAYX,KAAKC,UAAUD,KAAKE,cAChCF,KAAKE,aAAaG,UAAUK,GAAQC,GAErCA,EAAUL,UAAYM,YAAYC,MAClCF,EAAUH,aACVR,KAAKE,aAAeS,CACrB,CAEAG,YAAYJ,GACXV,KAAKG,cAAcO,IAASV,KAAKG,cAAcO,IAAS,GAAK,CAC9D,CAEAK,YACCf,KAAKE,aAAaK,SAAWK,YAAYC,MAAQb,KAAKE,aAAaI,UACnE,MAAMF,EAASJ,KAAKE,aAAaE,OACjC,IAAIA,EACH,MAAM,IAAIY,MAAM,wCAEjBhB,KAAKE,aAAeE,CACrB,CAEAa,eAAeP,GACdV,KAAKe,YACLf,KAAKS,WAAWC,EACjB,CAEAf,QACC,MAAMuB,EAAsC,CAAC,EAC7C,IAAIC,EAAW,EACf,IAAI,MAAMT,KAAQV,KAAKxC,KAAK6C,UAC3Bc,GAAYnB,KAAKxC,KAAK6C,UAAUK,GAAOH,QAGxCP,KAAKoB,cAAa,CAACC,EAAOX,EAAMY,KAC/BZ,EAAO,IAAIa,MAAMD,EAAQ,GAAGE,KAAK,KAAOd,EACxCQ,EAAMR,GAAQ,CACb,WAAYe,EAAMJ,EAAOd,QAAUc,EAAMjB,OAAQG,QAAW,KAC5D,SAAUkB,EAAMJ,EAAOd,QAAUY,EAAY,KAC7C,eAAgBM,EAAMJ,EAAMd,QAAUc,EAAMb,YAC7C,IAGD5B,QAAQsC,MAAMA,GACdtC,QAAQsC,MAAMlB,KAAKG,cACpB,CAEAP,QACCI,KAAKxC,KAAOwC,KAAKC,UAAU,MAC3BD,KAAKE,aAAeF,KAAKxC,KACzBwC,KAAKG,cAAgB,CAAC,CACvB,CAEQiB,aAAaM,EAA+DC,EAAe3B,KAAKxC,KAAMoE,EAAe,GAC5H,IAAI,MAAMlB,KAAQiB,EAAMtB,UAAU,CACjC,MAAMwB,EAAWF,EAAMtB,UAAUK,GACjCgB,EAASG,EAAUnB,EAAMkB,GACzB5B,KAAKoB,aAAaM,EAAUG,EAAUD,EAAe,EACtD,CACD,GAMD,SAASH,EAAMK,GACd,OAAOC,KAAKC,MAAU,IAAJF,GAAW,GAC9B,C,+ECjGA,IAAAzD,EAAAf,EAAA,S,aAGO,MAAM2E,EAKZC,YAAqBlE,G,WAAAA,EACpB,MAAMmE,GAAS,EAAA9D,EAAAC,KAAI,CAACA,IAAK,WACzB0B,KAAKxC,KAAO2E,EAEZ,MAAMC,EAAUD,EAAOE,WAAW,MAClC,IAAID,EACH,MAAM,IAAIpB,MAAM,cAEjBhB,KAAKoC,QAAUA,CAChB,CAEA3C,KAAK6C,GACJ,MAAMC,EAAID,EAAOE,OAASxC,KAAKhC,MACzByE,EAAIH,EAAO,GAAIE,OAASxC,KAAKhC,MACnCgC,KAAKxC,KAAKkF,aAAa,QAASH,EAAI,IACpCvC,KAAKxC,KAAKkF,aAAa,SAAUD,EAAI,IACrCzC,KAAKxC,KAAKmF,MAAM5E,MAAQwE,EAAI,KAC5BvC,KAAKxC,KAAKmF,MAAM7E,OAAS2E,EAAI,KAE7B,MAAMG,EAAI5C,KAAKhC,MACf,IAAI,IAAI6E,EAAI,EAAGA,EAAIP,EAAOE,OAAQK,IAAI,CACrC,MAAMC,EAAMR,EAAOO,GACnB,IAAI,IAAIE,EAAI,EAAGA,EAAID,EAAIN,OAAQO,IAC9B/C,KAAKoC,QAAQY,WAAY,EAAAC,EAAAC,wBAAuBJ,EAAIC,IACpD/C,KAAKoC,QAAQe,SAASN,EAAID,EAAGG,EAAIH,EAAGA,EAAGA,EAEzC,CACD,E,sCCnCD,SAASQ,EAAOP,GACf,OAAQA,EAAI,GAAM,GAAK,KAAOA,EAAEQ,SAAS,GAC1C,CAEO,SAASC,EAAyBC,GAIxC,MAAO,CAHGA,GAAU,GAAM,IACrBA,GAAU,EAAK,IACfA,GAAU,EAAK,IAErB,CAEO,SAASC,EAAyBC,GACxC,MAAOC,EAAGC,EAAGC,GAAKH,EAClB,OAAOC,GAAM,GAAOC,GAAK,EAAKC,CAC/B,CAwEA,SAASC,EAASC,EAAWC,EAAWC,GAOvC,OANGA,EAAI,IACNA,GAAK,GAEHA,EAAI,IACNA,GAAK,GAEHA,EAAI,EAAI,EACHF,EAAc,GAATC,EAAID,GAASE,EAEvBA,EAAI,GACCD,EAELC,EAAI,EAAI,EACHF,GAAKC,EAAID,IAAM,EAAI,EAAIE,GAAK,EAE7BF,CACR,CAEO,SAASG,EAAuBC,GACtC,MAAMN,EAAU,IAANM,EAEJP,EAAU,KADhBO,IAAQ,GAKR,MAAO,IAAMd,EAFG,KADhBc,IAAQ,IAGiBd,EAAOO,GAAKP,EAAOQ,EAC7C,CAEO,SAASO,EAAkBC,EAAkBC,GACnD,MAAMC,EAAkBD,EACvBf,EArGK,SAAkBC,GACxB,IAAKG,EAAGC,EAAGC,GAAKN,EAAyBC,GAEzCG,GAAK,IACLC,GAAK,IACLC,GAAK,IAGL,MAAMW,EAAOxC,KAAKyC,IAAId,EAAGC,EAAGC,GAC3Ba,EAAO1C,KAAK2C,IAAIhB,EAAGC,EAAGC,GACtBe,EAAQF,EAAOF,EAChB,IAAI9B,EAAI,EACPG,EAAI,EACJgC,EAAI,EAkCL,OA7BCnC,EADY,IAAVkC,EACE,EACKF,IAASf,GAEZC,EAAIC,GAAKe,EAAS,EACfF,IAASd,GAEbC,EAAIF,GAAKiB,EAAQ,GAGjBjB,EAAIC,GAAKgB,EAAQ,EAGvBlC,EAAIV,KAAKC,MAAU,GAAJS,GAGZA,EAAI,IACNA,GAAK,KAINmC,GAAKH,EAAOF,GAAQ,EAGpB3B,EAAc,IAAV+B,EAAc,EAAIA,GAAS,EAAI5C,KAAK8C,IAAI,EAAID,EAAI,IAGpDhC,IAAU,IAAJA,GAASkC,QAAQ,GACvBF,IAAU,IAAJA,GAASE,QAAQ,GAEhBtB,EAAyB,CAAEf,EAAI,IAAO,IAAMG,EAAI,IAAO,IAAMgC,EAAI,IAAO,KAChF,CAsDGG,CAASX,KAMX,OAHAE,EAAgB,GAAKvC,KAAK2C,IAAI,EAAG3C,KAAKyC,IAAI,IAAKzC,KAAKC,MAAMsC,EAAgB,MAC1EA,EAAgB,GAAKvC,KAAK2C,IAAI,EAAG3C,KAAKyC,IAAI,IAAKzC,KAAKC,MAAMsC,EAAgB,MAC1EA,EAAgB,GAAKvC,KAAK2C,IAAI,EAAG3C,KAAKyC,IAAI,IAAKzC,KAAKC,MAAMsC,EAAgB,MAzDpE,SAAkBU,GACxB,IAIItB,EAAWC,EAAWC,GAJrBnB,EAAGG,EAAGgC,GAAKtB,EAAyB0B,GAMzC,GALAvC,GAAK,IACLG,GAAK,IACLgC,GAAK,IAGI,IAANhC,EACFc,EAAIC,EAAIC,EAAIgB,MACN,CACN,MAAMb,EAAIa,EAAI,GAAMA,GAAK,EAAIhC,GAAKgC,EAAIhC,EAAIgC,EAAIhC,EACxCkB,EAAI,EAAIc,EAAIb,EAClBL,EAAIG,EAASC,EAAGC,EAAGtB,EAAI,EAAI,GAC3BkB,EAAIE,EAASC,EAAGC,EAAGtB,GACnBmB,EAAIC,EAASC,EAAGC,EAAGtB,EAAI,EAAI,EAC5B,CAEA,OAAOe,EAAyB,CAACzB,KAAKkD,MAAU,IAAJvB,GAAU3B,KAAKkD,MAAU,IAAJtB,GAAU5B,KAAKkD,MAAU,IAAJrB,IACvF,CAwCQsB,CACN1B,EACCc,GAGH,C,gKCjIA,IAAAjG,EAAAf,EAAA,S,oDAoBO,MAAM6H,EAWZjD,YAA6BkD,G,YAAAA,E,KANrBC,UAAmC,KAO1CrF,KAAK/B,QAAU,IAAI,EAAAC,EAAAC,mBAAkBiH,EAAOpH,QAE5C,EAAAsH,EAAAC,oBAAmBvF,KAAK/B,QAAQT,OAChC,EAAA8H,EAAAE,sBAAqB,CACpBC,QAASzF,KAAK/B,QAAQT,KACtBkI,OAAQ1F,KAAK2F,iBAAiBC,KAAK5F,MACnC6F,YAAY,IAGb7F,KAAK8F,QAAU,IAAIvE,MAAM6D,EAAOrH,OAAOgI,KAAK,MAAMC,KAAI,IACrD,IAAIzE,MAAM6D,EAAOtH,QAAQiI,KAAKX,EAAOvH,gBAGtC,MAAMoI,EAAiBb,EAAOxH,QAAQoI,KAAIzC,IACzC,MAAM2C,GAAsB,EAAA7H,EAAAC,KAAI,CAC/BC,MAAOC,EAAA,8BACPC,QAAS,KACRuB,KAAKqF,UAAYrF,KAAKmG,YAAYnG,KAAKqF,UAAWa,EAAQ3C,EAAA,EAK3DZ,MAAO,CACNyD,iBAAiB,EAAAnD,EAAAC,wBAAuBK,MAQ1C,OALA,EAAA+B,EAAAC,oBAAmBW,GAChB3C,IAAUvD,KAAKoF,OAAOvH,eACxBmC,KAAKqF,UAAYrF,KAAKmG,YAAY,KAAMD,EAAQ3C,EAAO/E,EAAA,sBAGjD0H,CAAA,IAGRlG,KAAKxC,MAAO,EAAAa,EAAAC,KAAI,CACfC,MAAOC,EAAA,uBACL,CACFwB,KAAK/B,QAAQT,MACb,EAAAa,EAAAC,KAAI,CACHC,MAAOC,EAAA,+BACLyH,KAGJjG,KAAKqG,cACN,CAEQA,eACPrG,KAAK/B,QAAQwB,KAAKO,KAAK8F,QACxB,CAEQH,iBAAiBW,GACxB,MAAMC,GAAS,EAAAjB,EAAAkB,6BAA4BF,GAC3C,IAAIC,EACH,OAQD,MAAME,EAAQ1E,KAAKkD,MAAMsB,EAAO1D,EAAI7C,KAAKoF,OAAOpH,OAC1C0I,EAAQ3E,KAAKkD,MAAMsB,EAAOxD,EAAI/C,KAAKoF,OAAOpH,OAC1C8E,EAAM9C,KAAK8F,QAAQW,GACzB,GAAG3D,GAAOA,EAAIN,OAASkE,EAAM,CAE5B,MAAMC,EAAK3G,KAAKqF,UACbsB,GACF3G,KAAK4G,IAAIH,EAAOC,EAAOC,EAAGpD,MAE5B,CACD,CAEA1D,SAASyC,GACRtC,KAAK8F,QAAUhH,KAAK+H,MAAM/H,KAAKC,UAAUuD,IACzCtC,KAAKqG,cACN,CAEAO,IAAI/D,EAAWE,EAAWQ,GACzBvD,KAAK8F,QAAQjD,GAAIE,GAAKQ,EACtBvD,KAAKqG,cACN,CAEQF,YAAYW,EAA+BZ,EAAqB3C,EAAUwD,EAAgB,YACjG,MAAMC,EAAUF,GAAQG,WAAaF,EAClCD,GACFA,EAAOZ,OAAOgB,UAAUC,OAAOH,GAEhC,MAAML,EAAqB,C,OAC1BT,E,MACA3C,EACA0D,UAAWD,GAGZ,OADAd,EAAOgB,UAAUE,IAAIJ,GACdL,CACR,CAEAhI,aACC,OAAOG,KAAK+H,MAAM/H,KAAKC,UAAUiB,KAAK8F,SACvC,E,sCCnIM,SAASuB,EAA4Bf,GAC3C,GA0BM,SAAsBA,GAC5B,QAASA,EAAkBgB,OAC5B,CA5BIC,CAAajB,GAAG,CAClB,MAAMkB,EAAQlB,EAAEgB,QAAQ,GACxB,MAAO,CACNzE,EAAG2E,EAAMC,QACT1E,EAAGyE,EAAME,QAEX,CACC,MAAO,CACN7E,EAAGyD,EAAEmB,QACL1E,EAAGuD,EAAEoB,QAGR,CAEO,SAASC,EAA4BrB,GAC3C,KAAKA,EAAEsB,kBAAkBC,aACxB,OAAO,KAGR,MAAMC,EAAOxB,EAAEsB,OAAOG,wBAChBxB,EAASc,EAA4Bf,GAG3C,OAFAC,EAAO1D,GAAKiF,EAAKE,KACjBzB,EAAOxD,GAAK+E,EAAKG,IACV1B,CACR,CAgBO,SAAS2B,EAAqB9C,GAEpC,MAAM+C,EAAU7B,IACf8B,OAAOC,iBAAiB,YAAajD,EAAOM,OAAQ,CAAC4C,SAAS,IAC9DF,OAAOC,iBAAiB,YAAajD,EAAOM,OAAQ,CAAC4C,SAAS,IAC9DF,OAAOC,iBAAiB,UAAWE,EAAM,CAACD,SAAS,IACnDF,OAAOC,iBAAiB,WAAYE,EAAM,CAACD,SAAS,IACjDlD,EAAOS,YACTT,EAAOM,OAAOY,EAAA,EAIViC,EAAQjC,IACb8B,OAAOI,oBAAoB,YAAapD,EAAOM,QAC/C0C,OAAOI,oBAAoB,YAAapD,EAAOM,QAC/C0C,OAAOI,oBAAoB,UAAWD,GACtCH,OAAOI,oBAAoB,WAAYD,GACpCnD,EAAOqD,UACTrD,EAAOM,OAAOY,EAAA,EAIhBlB,EAAOK,QAAQ4C,iBAAiB,YAAaF,EAAQ,CAACG,SAAS,IAC/DlD,EAAOK,QAAQ4C,iBAAiB,aAAcF,EAAQ,CAACG,SAAS,GACjE,CAEO,SAASI,EAAmBC,GAClCA,EAAGN,iBAAiB,eAAe/B,IAClCA,EAAEsC,iBACFtC,EAAEuC,mBACK,IAET,C,iOCzEA,IAAAC,EACAC,EACAC,EAEAC,EACAC,E,sRALAJ,EAAuC,4BACvCC,EAA+C,oCAC/CC,EAAgD,qCAEhDC,EAAqC,0BACrCC,EAA+C,mC,kFCL/C,IAAAC,EAAA7L,EAAA,S,aAkBO,SAAS8L,EAAwBhE,GACvC/H,EAAAqC,YAAYe,WAAW,cACvB,MAAM4I,SAACA,EAAQC,OAAEA,GAsClB,SAAiBlE,GAChB,MAAMmE,EA6DP,SAAyBjK,GACxB,MAAMN,EAAe,GACrB,IAAI,IAAI6D,EAAmB,EAAdvD,EAAiBuD,EAAIvD,EAAauD,IAC9C,IAAI,IAAIE,EAAmB,EAAdzD,EAAiByD,EAAIzD,EAAayD,IACrC,IAANF,GAAiB,IAANE,GAGd/D,EAAOwK,KAAK,C,EAAC3G,E,EAAGE,IAGlB,OAAO/D,CACR,CAxEiByK,CAAgBrE,EAAO9F,cAChC+J,EAAUK,GA6FlB,SAA0CtE,GACzC,IAAIiE,EA6FL,SAAqCjE,GACpC,IAAIiE,EAA6B,GACjC,IAAI,IAAIxG,EAAI,EAAGA,EAAIuC,EAAO/F,aAAamD,OAAS4C,EAAO9F,YAAc,EAAGuD,IAAI,CAC3E,MAAMC,EAAMsC,EAAO/F,aAAawD,GAChC,IAAI,IAAIE,EAAI,EAAGA,EAAID,EAAIN,OAAS4C,EAAO9F,YAAc,EAAGyD,IACvDsG,EAASG,KAAKG,EAAuBvE,EAAO/F,aAAcwD,EAAGE,EAAGqC,EAAO9F,aAEzE,CAEA,GAAG8F,EAAOjG,KAAK,CACd,MAAMyK,EAA4B,GAClC,IAAI,MAAMC,IAAQ,CAAC,IAAK,KACvB,IAAI,MAAM/D,KAAWuD,EACpBO,EAAQJ,KAAKM,EAAYhE,EAAS+D,IAGpCR,EAAW,IAAIA,KAAaO,EAC7B,CAEA,GAAGxE,EAAOhG,OAAO,CAChB,MAAM2K,EAA4B,GAClC,IAAI,MAAMC,IAAS,CAAC,EAAG,EAAG,GACzB,IAAI,MAAMC,KAAWZ,EACpBU,EAAQP,KAAKU,EAAcD,EAASD,IAGtCX,EAAW,IAAIA,KAAaU,EAC7B,CAEA,OAAOV,CACR,CA3HgBc,CAAyB/E,GAExC,MAAMgF,EAAU,IAAIC,IACdC,EAAS,IAAIC,EAAcnF,EAAO/F,cACxC,IAAI,MAAMyG,KAAWuD,EAAS,CAC7B,MAAMmB,EAAOF,EAAOE,KAAK1E,GACzB,IAAI2E,EAAML,EAAQM,IAAIF,GAClBC,IACHA,EAAM,GACNL,EAAQxD,IAAI4D,EAAMC,IAEnBA,EAAIjB,KAAK1D,EACV,CAEA,MAAM6E,EAAU,IAAIN,IACpB,IAAI,MAAMO,KAAYR,EAAQ9H,SAC7B,IAAI,IAAIuI,EAAI,EAAGA,EAAID,EAASpI,OAAQqI,IAAI,CACvC,MAAMZ,EAAUW,EAASC,GACzB,IAAIZ,EACH,SAED,IAAID,EAAQ,EACZ,IAAI,IAAIc,EAAI,EAAGA,EAAIF,EAASpI,OAAQsI,IAAI,CACvC,MAAMC,EAAeH,EAASE,GAC1BC,IAGDC,EAAiBf,EAASc,KAC5BH,EAASE,GAAK,MAEfd,IACD,CACAW,EAAQ/D,IAAIqD,EAASD,EACtB,CAEDX,EAAW,IAAIsB,EAAQM,QAEvB,MAAMC,EAAkB,GACxB,IAAI,MAAMC,KAAW9B,EACpB6B,EAAM1B,KAAKmB,EAAQD,IAAIS,IAExB,MAAO,CAAC9B,EAAU+B,EAAeF,GAClC,CAxIkCG,CAA8BjG,GACzDkG,EAOP,SAAqBjC,EAA4BE,GAChD,MAAMvK,EAAgB,IAAIuC,MAAM8H,EAAS7G,QAAQuD,KAAK,MAAMC,KAAI,IACtC,IAAIqE,IAAoBd,EAAQvD,KAAIuF,GAAU,CAACC,EAAaD,GAAS,IAAI,EAAApC,EAAAsC,QAAOpC,EAAS7G,cAKnH,IAAI,MAAM+I,KAAUhC,EAAQ,CAC3B,MAAMmC,EAAgBF,EAAaD,GAE7BI,EAAoBH,EAAaI,EAAWL,IAClD,IAAI,IAAIM,EAAS,EAAGA,EAASxC,EAAS7G,OAAQqJ,IAAS,CACtD,MAAMC,EAAIzC,EAASwC,GACnB,IAAI,IAAIE,EAASF,EAAQE,EAAS1C,EAAS7G,OAAQuJ,IAAS,CAExDC,EAAkBF,EADXzC,EAAS0C,GACQR,KAC1BvM,EAAO6M,GAASnB,IAAIgB,GAAgB9E,IAAImF,GACxC/M,EAAO+M,GAASrB,IAAIiB,GAAoB/E,IAAIiF,GAE9C,CACD,CACD,CAEA,OAAO7M,CACR,CA/BeiN,CAAS5C,EAAUE,GAC3B2C,EAydP,SAAoBC,GAInB,MAAMC,GAOQN,EAPK,WAOMlI,EAPM,UAOKyI,EAPO,WAOIC,EAV/CH,GAAQ,WAWD,WAEN,IAAInI,GADJ8H,KAAO,IAAGlI,KAAO,GACC,EAOlB,OANAkI,EAAIlI,EAAIA,IAAM,EACdA,GAHoByI,KAAO,IAGlBA,GAAK,GAAK,EAGnBrI,EAAIA,GADJsI,EAAQ,GALsBA,KAAO,GAKzB,GACA,EACZD,GAHAA,EAAKA,GAAK,GAAKA,IAAM,IAGbrI,EAAI,GACJA,IAAM,GAAK,UACpB,GAXD,IAAe8H,EAAWlI,EAAWyI,EAAWC,EAN/C,IAAI,IAAIzB,EAAI,EAAGA,EAAI,GAAIA,IACtBuB,IAED,OAAOA,CACR,CAlegBG,CAAWnH,EAAO7F,YAC3B+J,EAAS,IAAIkD,EAAOpH,EAAO5F,WAAWzB,MAAOqH,EAAO5F,WAAW1B,OAAQuL,EAAS7G,OAAQ0J,EAAQZ,EAAO/B,EAASG,GAEtH,MAAO,C,QAACH,E,SAASF,E,aAAUK,E,MAAc4B,E,OAAOhC,E,OAAQ4C,EACzD,CA9C4BO,CAAKrH,GAGhC,IAFA/H,EAAAqC,YAAYuB,eAAe,mBAEpBqI,EAAOoD,yBAAwB,CACrCrP,EAAAqC,YAAYe,WAAW,UACvB,MAAMkM,EAAqBrD,EAAOsD,qBAClC,IAAID,EACH,MAAM,IAAI3L,MAAM,4BAEjB3D,EAAAqC,YAAYuB,eAAe,YAC3BqI,EAAOuD,SAASF,GAChBtP,EAAAqC,YAAYqB,WACb,CAEA,MAAM+L,EAAiBxD,EAAOyD,aAI9B,OAFA1P,EAAAqC,YAAYqB,YAEL+L,EAAe9G,KAAIlD,GAAOA,EAAIkD,KAAIgH,GACxB3D,EAAS2D,GACV,GAAI,MAErB,CAoDA,SAAShB,EAAqBF,EAAmBlI,EAAmB2H,GACnE,MAAMjM,EAAcwM,EAAEtJ,OAChByK,EAAsB3N,EAAcyC,KAAK8C,IAAI0G,EAAO1I,GACpDqK,EAAsB5N,EAAcyC,KAAK8C,IAAI0G,EAAOxI,GAEpDoK,EAAUpL,KAAKyC,IAAIzC,KAAK2C,IAAI6G,EAAO1I,EAAG,GAAIvD,EAAc2N,GACxDG,EAAUrL,KAAKyC,IAAIzC,KAAK2C,IAAI6G,EAAOxI,EAAG,GAAIzD,EAAc4N,GACxDG,EAAUtL,KAAKyC,IAAIzC,KAAK2C,KAAK6G,EAAO1I,EAAG,GAAIvD,EAAc2N,GACzDK,EAAUvL,KAAKyC,IAAIzC,KAAK2C,KAAK6G,EAAOxI,EAAG,GAAIzD,EAAc4N,GAE/D,IAAI,IAAIK,EAAK,EAAGA,EAAKN,EAAqBM,IACzC,IAAI,IAAIC,EAAK,EAAGA,EAAKN,EAAqBM,IACzC,GAAG1B,EAAEqB,EAAUI,GAAKH,EAAUI,KAAQ5J,EAAEyJ,EAAUE,GAAKD,EAAUE,GAChE,OAAO,EAIV,OAAO,CACR,CAEA,SAAS5B,EAAWL,GACnB,MAAO,CAAC1I,GAAI0I,EAAO1I,EAAGE,GAAIwI,EAAOxI,EAClC,CAiBA,SAASyI,EAAaD,GACrB,OAAOxJ,KAAK8C,IAAI0G,EAAO1I,IAAM,GAAKd,KAAK8C,IAAI0G,EAAOxI,IAAM,GAAKwI,EAAOxI,EAAI,EAAI,EAAM,IAAMwI,EAAO1I,EAAI,EAAI,EAAM,EAC9G,CAEA,SAAS4K,EAAeC,GACvB,OAAOA,EAAS7K,GAAK,GAAK6K,EAAS3K,CACpC,CASA,SAASqI,EAAeuC,GACvB,MAAMC,EAAMD,EAAME,QAAO,CAAC/B,EAAGlI,IAAMkI,EAAIlI,GAAG,GAC1C,OAAO+J,EAAM3H,KAAInD,GAAKA,EAAI+K,GAC3B,CA+CA,SAAS5C,EAAoBc,EAAmBlI,GAC/C,IAAI,IAAIf,EAAI,EAAGA,EAAIiJ,EAAEtJ,OAAQK,IAAI,CAChC,MAAMiL,EAAOhC,EAAEjJ,GACTkL,EAAOnK,EAAEf,GACf,IAAI,IAAIE,EAAI,EAAGA,EAAI+K,EAAKtL,OAAQO,IAC/B,GAAG+K,EAAK/K,KAAOgL,EAAKhL,GACnB,OAAO,CAGV,CACA,OAAO,CACR,CAGA,MAAMwH,EAEYyD,aAA+B,IAAI3D,IAEpDnI,YAAYxD,GACX,MAAMuP,EAAoB,IAAI,IAAIC,IAAIC,EAAQzP,KAC9C,IAAI,IAAImM,EAAI,EAAGA,EAAIoD,EAAkBzL,OAAQqI,IAC5C7K,KAAKgO,aAAapH,IAAIqH,EAAkBpD,GAAKA,EAE/C,CAEAL,KAAK1E,GACJ,IAAI0E,EAAO,EAEX,IAAI,IAAI3H,EAAI,EAAGA,EAAIiD,EAAQtD,OAAQK,IAAI,CACtC,MAAMC,EAAMgD,EAAQjD,GACpB,IAAI,IAAIE,EAAI,EAAGA,EAAID,EAAIN,OAAQO,IAAI,CAClC,MAAMqL,EAAOtL,EAAIC,GAEjByH,GAASA,GAAQ,GAAKA,EADJxK,KAAKgO,aAAatD,IAAI0D,GACEvL,EAAIE,EAAM,CACrD,CACD,CAEA,OAAOyH,CACR,EAGD,SAAS2D,EAAW1D,GACnB,MAAMzL,EAAc,GACpB,IAAI,MAAM8D,KAAO2H,EAChBzL,EAAOwK,QAAQ1G,GAEhB,OAAO9D,CACR,CAkCA,SAAS2K,EAA0BjL,EAAsDmE,EAAWE,EAAWsL,GAC9G,MAAMrP,EAAgB,GACtB,IAAI,IAAIuO,EAAK,EAAGA,EAAKc,EAAMd,IAAK,CAC/B,MAAMzK,EAAMpE,EAAOmE,EAAI0K,GACvBvO,EAAOwK,KAAK1G,EAAIwL,MAAMvL,EAAGA,EAAIsL,GAC9B,CACA,OAAOrP,CACR,CAEA,SAASuP,EAAezI,GACvB,MAAM9G,EAAgB,GACtB,IAAI,IAAI6D,EAAI,EAAGA,EAAIiD,EAAQtD,OAAQK,IAClC7D,EAAOwK,KAAK,IAAI1D,EAAQjD,KAEzB,OAAO7D,CACR,CAEA,SAAS8K,EAAehE,EAAyB+D,GAChD,MAAM2E,EAAMD,EAAYzI,GAClB2I,EAAU1M,KAAKkD,MAAMa,EAAQtD,OAAS,GAC5C,GAAY,MAATqH,EACF,IAAI,IAAI0D,EAAK,EAAGA,EAAKkB,EAASlB,IAAK,CAClC,MAAMmB,EAAOF,EAAIjB,GACXoB,EAAOH,EAAIA,EAAIhM,OAAS+K,EAAK,GACnC,IAAI,IAAIxK,EAAI,EAAGA,EAAI2L,EAAKlM,OAAQO,IAAI,CACnC,MAAM6L,EAAMF,EAAK3L,GACjB2L,EAAK3L,GAAK4L,EAAK5L,GACf4L,EAAK5L,GAAK6L,CACX,CACD,MAEA,IAAI,IAAI/L,EAAI,EAAGA,EAAIiD,EAAQtD,OAAQK,IAAI,CACtC,MAAMC,EAAM0L,EAAI3L,GAChB,IAAI,IAAI2K,EAAK,EAAGA,EAAKiB,EAASjB,IAAK,CAClC,MAAMqB,EAAM/L,EAAI0K,GAChB1K,EAAI0K,GAAM1K,EAAIA,EAAIN,OAASgL,EAAK,GAChC1K,EAAIA,EAAIN,OAASgL,EAAK,GAAKqB,CAC5B,CACD,CAED,OAAOL,CACR,CAEA,SAAStE,EAAiBpE,EAAyBgJ,GAClD,MAAMN,EAAMD,EAAYzI,GAClBuI,EAAOvI,EAAQtD,OACfuM,EAAWhN,KAAKkD,MAAMoJ,EAAO,GACnC,IAAI,IAAIxD,EAAI,EAAGA,EAAIiE,EAAOjE,IACzB,IAAI,IAAImE,EAAe,EAAGA,EAAeD,EAAUC,IAAe,CACjE,MAAMC,EAAUZ,EAAOW,EAAe,EACtC,IAAI,IAAIE,EAAYF,EAAcE,EAAYb,EAAOW,EAAe,EAAGE,IAAY,CAClF,MAAMN,EAAMJ,EAAIU,GAAYF,GAC5BR,EAAIU,GAAYF,GAAgBR,EAAIS,GAAUC,GAC9CV,EAAIS,GAAUC,GAAaV,EAAIH,EAAOa,EAAY,GAAID,GACtDT,EAAIH,EAAOa,EAAY,GAAID,GAAWT,EAAIQ,GAAeX,EAAOa,EAAY,GAC5EV,EAAIQ,GAAeX,EAAOa,EAAY,GAAKN,CAC5C,CACD,CAED,OAAOJ,CACR,CAEA,MAAMhC,EAOLtK,YACkBnE,EACAD,EACjBqR,EACiBjD,EACAZ,EACA/B,EACA2B,G,WANAnN,E,YACAD,E,YAEAoO,E,WACAZ,E,aACA/B,E,WACA2B,EAEjBlL,KAAKmP,aAA6C,EAA9BpN,KAAKqN,KAAKD,EAAe,GAC7CnP,KAAKqP,QAAU,IAAI9N,MAAMxD,EAAQD,GAAQiI,KAAK,GAC9C/F,KAAKsJ,OAAS,IAAI,EAAAH,EAAAsC,QAAO1N,EAAQD,EAASkC,KAAKmP,cAC/CnP,KAAKsP,aAAe,IAAI,EAAAnG,EAAAsC,QAAO1N,EAAQD,GACvCkC,KAAKuP,sBAAwBxR,EAAQD,EAErCkC,KAAKsJ,OAAOkG,SACZ,MAAMC,EAAsBzP,KAAKmP,aAAeA,EAChD,IAAI,IAAItE,EAAI,EAAGA,EAAI9M,EAAQD,EAAQ+M,IAAI,CACtC,MAAM6E,GAAY7E,EAAI,GAAK7K,KAAKmP,aAAgB,EAChD,IAAI,IAAI5D,EAAS,EAAGA,EAASkE,EAAqBlE,IACjDvL,KAAKsJ,OAAOqG,MAAMD,EAAUnE,EAE9B,CACD,CAEAmB,wBACC,OAAsC,IAA/B1M,KAAKuP,qBACb,CAEA3C,qBACC,IAAIgD,EAAaC,OAAOC,iBACxB,MAAMC,EAAkB,GACxB,IAAI,IAAIlF,EAAI,EAAGA,EAAI7K,KAAKqP,QAAQ7M,OAAQqI,IAAI,CAC3C,GAAG7K,KAAKsP,aAAa5E,IAAIG,GACxB,SAED,MAAMwE,EAAUrP,KAAKqP,QAAQxE,GAC1BwE,EAAUO,IACZG,EAAMvN,OAAS,EACfoN,EAAaP,GAEXA,IAAYO,GACdG,EAAMvG,KAAKqB,EAEb,CACA,GAAoB,IAAjBkF,EAAMvN,OACR,OAAO,KAKR,MAAMwN,EAAyB,IAAjBD,EAAMvN,OAAeuN,EAAM,GAAMA,EAAMhO,KAAKkD,MAAMjF,KAAKkM,SAAW6D,EAAMvN,SACtF,MAAO,CAACK,EAAGmN,EAAQhQ,KAAKjC,MAAOgF,EAAGhB,KAAKkD,MAAM+K,EAAQhQ,KAAKjC,OAC3D,CAEA8O,SAASoD,GACR5S,EAAAqC,YAAYe,WAAW,gBAEvB,MAAMyP,EAAYD,EAAKlN,EAAI/C,KAAKjC,MAAQkS,EAAKpN,EACvCsN,EAAkBnQ,KAAKsJ,OAAO8G,oBAAoBF,EAAYlQ,KAAKmP,aAAcnP,KAAKmP,cAC5F,GAA8B,IAA3BgB,EAAgB3N,OAElB,MAAM,IAAIxB,MAAM,YAAYiP,EAAKpN,MAAMoN,EAAKlN,kCAI7C,GAFA/C,KAAKsP,aAAa1I,IAAIsJ,GACtBlQ,KAAKuP,wBACyB,IAA3BY,EAAgB3N,OAElB,YADAnF,EAAAqC,YAAYqB,YAGb,MAAMsP,EAAgBF,EAAgBpO,KAAKkD,MAAMjF,KAAKkM,SAAWiE,EAAgB3N,SAGjF,IAAI,MAAM8N,KAASH,EACfG,IAAUD,GAGbrQ,KAAKsJ,OAAOqG,MAAMO,EAAYlQ,KAAKmP,aAAemB,GAEnDtQ,KAAKqP,QAAQa,GAAa,EAC1B7S,EAAAqC,YAAYuB,eAAe,aAC3BjB,KAAKuQ,oBAAoBN,GACzB5S,EAAAqC,YAAYqB,WACb,CAEQyP,WAAWjK,GAClB,OAAOA,EAAO1D,GAAK,GAAK0D,EAAOxD,GAAK,GAAKwD,EAAO1D,EAAI7C,KAAKjC,OAASwI,EAAOxD,EAAI/C,KAAKlC,MACnF,CAEQyS,oBAAoBN,GAC3B,MAAMQ,EAAQ,IAAIC,EAGlB,IAFAD,EAAME,QAAQlD,EAAewC,MAElB,CACV,MAAMW,EAAkBH,EAAMI,UAC9B,GAAGD,QACF,MAED,MAAME,EAhTD,CACNjO,GAFsB6K,EAiTWkD,IA/SjB,GAAM,MACtB7N,EAAc,MAAX2K,GAiTF,IAAI,MAAMnC,KAAUvL,KAAKuJ,QAAQ,CAChC,MAAMwH,EAAkB,CAAClO,EAAGiO,EAASjO,EAAI0I,EAAO1I,EAAGE,EAAG+N,EAAS/N,EAAIwI,EAAOxI,GAC1E,IAAI/C,KAAKwQ,WAAWO,GACnB,SAED,MAAMC,EAAoBD,EAAgBhO,EAAI/C,KAAKjC,MAAQgT,EAAgBlO,EAC3E,GAAG7C,KAAKsP,aAAa5E,IAAIsG,GACxB,SAGehR,KAAKiR,wBAAwBH,EAAUvF,IAEtDkF,EAAME,QAAQlD,EAAesD,GAE/B,CACD,CAnUF,IAAwBrD,CAoUvB,CAEQuD,wBAAwBH,EAAcvF,GAE7ClO,EAAAqC,YAAYe,WAAW,oBACvB,MAAMiL,EAAgBF,EAAaD,GAC7B2F,EAAgBJ,EAAS/N,EAAI/C,KAAKjC,MAAQ+S,EAASjO,EACzDxF,EAAAqC,YAAYe,WAAW,eACvB,MAAM0Q,EAAmBnR,KAAKsJ,OAAO8G,oBAAoBc,EAAgBlR,KAAKmP,aAAcnP,KAAKmP,cACjG9R,EAAAqC,YAAYuB,eAAe,cAC3B,MAAMmQ,EAA2B,IAAI,EAAAjI,EAAAsC,QAAOzL,KAAKmP,cACjD,IAAI,MAAMkC,KAAeF,EAAiB,CACzC,MAAMG,EAAiBtR,KAAKsL,MAAM+F,GAAc3G,IAAIgB,GACpD0F,EAAyBG,eAAeD,EACzC,CACAjU,EAAAqC,YAAYqB,YAEZ1D,EAAAqC,YAAYuB,eAAe,iBAC3B,MAAMuQ,EAAiBV,EAASjO,EAAI0I,EAAO1I,EACrC4O,GAD2CX,EAAS/N,EAAIwI,EAAOxI,GAC9B/C,KAAKjC,MAAQyT,EAC9CE,EAAY1R,KAAKsJ,OAAOqI,IAAIP,EAA0BK,EAAkBzR,KAAKmP,cAOnF,OANGuC,IACF1R,KAAKqP,QAAQoC,GAAmBzR,KAAKsJ,OAAO8G,oBAAoBqB,EAAkBzR,KAAKmP,aAAcnP,KAAKmP,cACxGnJ,KAAIF,GAAW9F,KAAKkL,MAAMpF,KAC1B+H,QAAO,CAAC/B,EAAGlI,IAAMkI,EAAIlI,GAAG,IAE3BvG,EAAAqC,YAAYqB,YACL2Q,CACR,CAEA3E,aACC,MAAM/N,EAAqB,GAC3B,IAAI,IAAI6D,EAAI,EAAGA,EAAI7C,KAAKjC,MAAO8E,IAAI,CAClC,MAAMC,EAAgB,GACtB9D,EAAOwK,KAAK1G,GACZ,IAAI,IAAIC,EAAI,EAAGA,EAAI/C,KAAKlC,OAAQiF,IAAI,CACnC,MAAMiN,EAAQjN,EAAI/C,KAAKjC,MAAQ8E,EACzBwG,EAAWrJ,KAAKsJ,OAAO8G,oBAAoBJ,EAAQhQ,KAAKmP,aAAcnP,KAAKmP,cACjFrM,EAAI0G,KAAKH,EAAS,GACnB,CACD,CACA,OAAOrK,CACR,CAEAqE,WACC,IAAIuO,EAAiB,EACrB,MAAM5S,EAAqB,GAC3B,IAAI,IAAI+D,EAAI,EAAGA,EAAI/C,KAAKlC,OAAQiF,IAAI,CACnC,MAAMD,EAAgB,GACtB9D,EAAOwK,KAAK1G,GACZ,IAAI,IAAID,EAAI,EAAGA,EAAI7C,KAAKjC,MAAO8E,IAAI,CAClC,MAAMmN,EAAQjN,EAAI/C,KAAKjC,MAAQ8E,EACzBwG,EAAWrJ,KAAKsJ,OAAO8G,oBAAoBJ,EAAQhQ,KAAKmP,aAAcnP,KAAKmP,cAC3E0C,EAkFV,SAAsBvP,EAAawP,GAClC,MAAM9S,EAAgB,GACtB,GAAqB,IAAlBsD,EAAOE,OACT,OAAOxD,EAER,IAAI+S,EAAmB,CAACzP,EAAO,IAC/BtD,EAAOwK,KAAKuI,GAEZ,IAAI,IAAIlH,EAAI,EAAGA,EAAIvI,EAAOE,OAAQqI,IAAI,CACrC,MAAM/I,EAAIQ,EAAOuI,GACdiH,EAAWC,EAAYA,EAAYvP,OAAS,GAAKV,GACnDiQ,EAAYvI,KAAK1H,IAEjBiQ,EAAc,CAACjQ,GACf9C,EAAOwK,KAAKuI,GAEd,CAEA,OAAO/S,CACR,CAhCQgT,CArE0B3I,GAqEV,CAACyC,EAAGlI,IAAMkI,EAAI,IAAMlI,IAAGoC,KAAIiM,IACjD,MAAMC,EAAQD,EAAK,GACbE,EAAOF,EAAKA,EAAKzP,OAAS,GAChC,OAAG0P,IAAUC,EACLD,EAAQ,GACNA,EAAQ,IAAMC,EAChBD,EAAQ,IAAMC,EAEdD,EAAQ,IAAMC,CAAA,IAEpB3Q,KAAK,KA9ELsB,EAAI0G,KAAKqI,GACTD,EAAiB7P,KAAK2C,IAAIkN,EAAgBC,EAAIrP,OAC/C,CACD,CACA,OAAOxD,EAAOgH,KAAIlD,GAAOA,EAAIkD,KAAIiK,GAKnC,SAAkB4B,EAAaO,GAC9B,KAAMP,EAAIrP,OAAS4P,GAClBP,GAAO,IAER,OAAOA,CACR,CAV2CQ,CAASpC,EAAM2B,KAAiBpQ,KAAK,SAAQA,KAAK,KAC5F,EAoCD,MAAMkP,EACY9J,IAAM,IAAIsH,IACVuC,MAAsB,GAC/B6B,IAAM,EAEd3B,QAAQL,GACP,OAAGtQ,KAAK4G,IAAI2L,IAAIjC,KAGhBtQ,KAAK4G,IAAIQ,IAAIkJ,GACbtQ,KAAKyQ,MAAMjH,KAAK8G,IACT,EACR,CAEAO,UACC,MAAM7R,EAASgB,KAAKyQ,MAAMzQ,KAAKsS,KAM/B,OALAtS,KAAKyQ,MAAMzQ,KAAKsS,KAAO,KACpBtS,KAAKyQ,MAAMjO,OAASxC,KAAKsS,MAC3BtS,KAAK4G,IAAI4L,OAAOxT,GAChBgB,KAAKsS,OAECtT,CACR,E,oECrkBD,MAAayT,EAEZvQ,YAAqBmM,GACpB,G,UADoBA,EACjBA,EAAO,EACT,MAAM,IAAIrN,MAAM,sCAAsCqN,KAGpDA,EAAO,IACTA,EAA6B,EAAtBtM,KAAKqN,KAAKf,EAAO,IAGzBrO,KAAKyK,IAAM,IAAIiI,WAAWrE,GAAQ,EACnC,CAGAzH,IAAIoJ,GACH,MAAMvF,EAAMzK,KAAKyK,IACXkI,EAAY3C,GAAS,EAC3BvF,EAAIkI,GAAalI,EAAIkI,GAAe,IAAc,EAAR3C,EAC3C,CAGAL,MAAMK,GACL,MAAMvF,EAAMzK,KAAKyK,IACXkI,EAAY3C,GAAS,EAC3BvF,EAAIkI,GAAalI,EAAIkI,KAAiB,IAAc,EAAR3C,GAC7C,CAGAtF,IAAIsF,GACH,OAA4D,IAApDhQ,KAAKyK,IAAIuF,GAAS,GAAO,IAAc,EAARA,GACxC,CAGAR,SACCxP,KAAKyK,IAAI1E,KAAK,IACf,CAGA6M,WACC5S,KAAKyK,IAAI1E,KAAK,EACf,CAGAqK,oBAAoBzO,EAAea,GAClC,GAAW,EAARb,GAAwB,EAATa,EACjB,MAAM,IAAIxB,MAAM,iEAEjB,MAAMhC,EAAmB,GACzB,IAAI6L,EAAI,EACR,IAAI,IAAIgI,EAAa,EAAGA,EAAcrQ,GAAU,EAAIqQ,IAAa,CAChE,MAAMC,EAAO9S,KAAKyK,KAAK9I,GAAS,GAAKkR,GACrC,IAAIE,EAAO,EACX,KAAe,MAATA,GACFD,EAAOC,GACT/T,EAAOwK,KAAKqB,GAEbA,IACAkI,IAAS,CAEX,CACA,OAAO/T,CACR,CAKAgU,oBAAoBrR,EAAea,EAAgB+G,GAClD,GAAW,EAAR5H,GAAwB,EAATa,EACjB,MAAM,IAAIxB,MAAM,iEAEjB,IAAI0Q,GAAY,EACZnG,EAAS,EACT0H,EAAc,EACdC,EAAoB3J,EAAQ0J,GAChC,IAAI,IAAIJ,EAAa,EAAGA,EAAcrQ,GAAU,EAAIqQ,IAAa,CAChE,MAAMM,EAAWnT,KAAKyK,KAAK9I,GAAS,GAAKkR,GACzC,IAAIC,EAAO,EACPC,EAAO,EACX,KAAe,MAATA,GAAe,CACpB,MAAMK,EAAM7H,IAAW2H,EAAoBH,EAAO,EAClDrB,EAAYA,IAAcyB,EAAWJ,KAAUK,EAC5CA,IACFN,GAAQC,EACRE,IACAC,EAAoB3J,EAAQ0J,IAE7B1H,IACAwH,IAAS,CACV,CACA/S,KAAKyK,KAAK9I,GAAS,GAAKkR,GAAcC,CACvC,CACA,OAAOpB,CACR,CAMAC,IAAI0B,EAAeC,GAClB,GAAe,EAAZA,EACF,MAAM,IAAItS,MAAM,iEAEjB,IAAI0Q,GAAY,EAChB,IAAI,IAAImB,EAAa,EAAGA,EAAaQ,EAAM5I,IAAIjI,OAAQqQ,IAAa,CACnE,MAAMU,EAAWvT,KAAKyK,KAAK6I,GAAa,GAAKT,GAEvC7T,EAASuU,EADGF,EAAM5I,IAAIoI,GAE5BnB,EAAYA,GAAc1S,IAAWuU,EACrCvT,KAAKyK,KAAK6I,GAAa,GAAKT,GAAc7T,CAC3C,CACA,OAAO0S,CACR,CAEAH,eAAe8B,GACd,GAAGA,EAAM5I,IAAIjI,OAASxC,KAAKyK,IAAIjI,OAC9B,MAAM,IAAIxB,MAAM,2CAEjB,IAAI,IAAI6R,EAAa,EAAGA,EAAaQ,EAAM5I,IAAIjI,OAAQqQ,IACtD7S,KAAKyK,IAAIoI,GAAc7S,KAAKyK,IAAIoI,GAAeQ,EAAM5I,IAAIoI,EAE3D,E,sCC1HDW,EAAAC,QAAiB3U,KAAK+H,MAAM,+0kB,sCCA5B2M,EAAAC,QAAiB3U,KAAK+H,MAAM,8tB","sources":["src/sketches/wave_function_collapse/wave_function_collapse.ts","src/common/perfometer.ts","src/sketches/wave_function_collapse/color_array_display.ts","src/common/color_utils.ts","src/sketches/wave_function_collapse/pattern_input.ts","src/common/input_utils.ts","src/sketches/wave_function_collapse/wave_function_collapse.module.scss","src/sketches/wave_function_collapse/wave_function_collapse_algo.ts","src/common/bitmap.ts","src/sketches/wave_function_collapse/test_result.json","src/sketches/wave_function_collapse/island_small_source.json"],"sourcesContent":["import {performeter} from \"common/perfometer\"\nimport {ColorArrayDisplay} from \"sketches/wave_function_collapse/color_array_display\"\nimport {PatternInput} from \"sketches/wave_function_collapse/pattern_input\"\nimport {waveFunctionCollapse} from \"sketches/wave_function_collapse/wave_function_collapse_algo\"\nimport * as css from \"./wave_function_collapse.module.scss\"\nimport * as testResult from \"./test_result.json\"\n// import * as islandsSource from \"./island_source.json\"\nimport * as islandsSource from \"./island_small_source.json\"\nimport {tag} from \"@nartallax/cardboard-dom\"\n\nexport function main(root: HTMLElement): void {\n\tconst patternInput = new PatternInput<number>({\n\t\tpalette: [0x53bc01, 0xffeb03, 0xffa801, 0xf93a1d, 0xe21a5f, 0x572c62, 0xa1ccd3, 0x006898],\n\t\tdefaultValue: 0x53bc01,\n\t\theight: 10,\n\t\twidth: 10,\n\t\tscale: 10\n\t})\n\n\tconst display = new ColorArrayDisplay(10)\n\n\troot.appendChild(tag({\n\t\tclass: css[\"wave-function-collapse-root\"]\n\t}, [\n\t\ttag([\n\t\t\tpatternInput.root,\n\t\t\ttag({tag: \"button\", onClick: run}, [\"Collapse!\"])\n\t\t]),\n\t\tdisplay.root\n\t]))\n\n\tpatternInput.setValue(islandsSource)\n\n\tfunction run(): void {\n\t\tconst source = patternInput.getPattern()\n\t\tconsole.log(JSON.stringify(source))\n\t\tconst result = waveFunctionCollapse({\n\t\t\tflip: true,\n\t\t\trotate: true,\n\t\t\tsourceSample: source,\n\t\t\tpatternSize: 3,\n\t\t\trandomSeed: 12345,\n\t\t\tresultSize: {width: 30, height: 30}\n\t\t})\n\t\tdisplay.draw(result)\n\t\t// checkResult(result)\n\t\tperformeter.print()\n\t\tperformeter.reset()\n\t}\n}\n\nvoid checkResult\nfunction checkResult(result: number[][]): void {\n\tif(JSON.stringify(result) !== JSON.stringify(testResult)){\n\t\tconsole.error(\"Results are different!\")\n\t} else {\n\t\tconsole.log(\"Results are the same.\")\n\t}\n}","interface Block {\n\tparent: Block | null\n\tsubblocks: Record<string, Block>\n\ttimeStart: number\n\ttimeSum: number\n\tenterCount: number\n}\n\ninterface BlockToPrint {\n\t\"ms per enter\": number\n\t\"full %\": number\n\t\"parent %\": number\n}\n\nclass Perfometer {\n\n\tprivate root: Block = this.makeBlock(null)\n\tprivate currentBlock: Block = this.root\n\tprivate eventCounters: Record<string, number> = {}\n\n\tprivate makeBlock(parent: Block | null): Block {\n\t\treturn {\n\t\t\tsubblocks: {}, parent: parent,\n\t\t\ttimeStart: -1, timeSum: 0,\n\t\t\tenterCount: 0\n\t\t}\n\t}\n\n\tenterBlock(name: string): void {\n\t\tlet nextBlock = this.currentBlock.subblocks[name]\n\t\tif(!nextBlock){\n\t\t\tnextBlock = this.makeBlock(this.currentBlock)\n\t\t\tthis.currentBlock.subblocks[name] = nextBlock\n\t\t}\n\t\tnextBlock.timeStart = performance.now()\n\t\tnextBlock.enterCount++\n\t\tthis.currentBlock = nextBlock\n\t}\n\n\trecordEvent(name: string): void {\n\t\tthis.eventCounters[name] = (this.eventCounters[name] ?? 0) + 1\n\t}\n\n\texitBlock(): void {\n\t\tthis.currentBlock.timeSum += performance.now() - this.currentBlock.timeStart\n\t\tconst parent = this.currentBlock.parent\n\t\tif(!parent){\n\t\t\tthrow new Error(\"No parent! Blocks are all messed up.\")\n\t\t}\n\t\tthis.currentBlock = parent\n\t}\n\n\texitEnterBlock(name: string): void {\n\t\tthis.exitBlock()\n\t\tthis.enterBlock(name)\n\t}\n\n\tprint(): void {\n\t\tconst table: Record<string, BlockToPrint> = {}\n\t\tlet fullTime = 0\n\t\tfor(const name in this.root.subblocks){\n\t\t\tfullTime += this.root.subblocks[name]!.timeSum\n\t\t}\n\n\t\tthis.forEachBlock((block, name, depth) => {\n\t\t\tname = new Array(depth + 1).join(\"-\") + name\n\t\t\ttable[name] = {\n\t\t\t\t\"parent %\": strip((block.timeSum / block.parent!.timeSum) * 100),\n\t\t\t\t\"full %\": strip((block.timeSum / fullTime) * 100),\n\t\t\t\t\"ms per enter\": strip(block.timeSum / block.enterCount)\n\t\t\t}\n\t\t})\n\n\t\tconsole.table(table)\n\t\tconsole.table(this.eventCounters)\n\t}\n\n\treset(): void {\n\t\tthis.root = this.makeBlock(null)\n\t\tthis.currentBlock = this.root\n\t\tthis.eventCounters = {}\n\t}\n\n\tprivate forEachBlock(callback: (block: Block, name: string, depth: number) => void, start: Block = this.root, currentDepth = 0): void {\n\t\tfor(const name in start.subblocks){\n\t\t\tconst subblock = start.subblocks[name]!\n\t\t\tcallback(subblock, name, currentDepth)\n\t\t\tthis.forEachBlock(callback, subblock, currentDepth + 1)\n\t\t}\n\t}\n\n}\n\nexport const performeter = new Perfometer()\n\nfunction strip(v: number): number {\n\treturn Math.round(v * 100) / 100\n}","import {tag} from \"@nartallax/cardboard-dom\"\nimport {rgbNumberToColorString} from \"common/color_utils\"\n\nexport class ColorArrayDisplay {\n\n\treadonly root: HTMLElement\n\tprivate readonly context: CanvasRenderingContext2D\n\n\tconstructor(readonly scale: number) {\n\t\tconst canvas = tag({tag: \"canvas\"})\n\t\tthis.root = canvas\n\n\t\tconst context = canvas.getContext(\"2d\")\n\t\tif(!context){\n\t\t\tthrow new Error(\"No context\")\n\t\t}\n\t\tthis.context = context\n\t}\n\n\tdraw(values: readonly (readonly number[])[]): void {\n\t\tconst w = values.length * this.scale\n\t\tconst h = values[0]!.length * this.scale\n\t\tthis.root.setAttribute(\"width\", w + \"\")\n\t\tthis.root.setAttribute(\"height\", h + \"\")\n\t\tthis.root.style.width = w + \"px\"\n\t\tthis.root.style.height = h + \"px\"\n\n\t\tconst s = this.scale\n\t\tfor(let x = 0; x < values.length; x++){\n\t\t\tconst row = values[x]!\n\t\t\tfor(let y = 0; y < row.length; y++){\n\t\t\t\tthis.context.fillStyle = rgbNumberToColorString(row[y]!)\n\t\t\t\tthis.context.fillRect(x * s, y * s, s, s)\n\t\t\t}\n\t\t}\n\t}\n\n}","function twoHex(x: number): string {\n\treturn (x > 0xf ? \"\" : \"0\") + x.toString(16)\n}\n\nexport function colorNumberTo3Components(color: number): [r: number, g: number, b: number] {\n\tconst r = (color >> 16) & 0xff,\n\t\tg = (color >> 8) & 0xff,\n\t\tb = (color >> 0) & 0xff\n\treturn [r, g, b]\n}\n\nexport function color3ComponentsToNumber(components: [r: number, g: number, b: number]): number {\n\tconst [r, g, b] = components\n\treturn (r << 16) | (g << 8) | b\n}\n\nexport function rgbToHsl(color: number): number {\n\tlet [r, g, b] = colorNumberTo3Components(color)\n\t// Make r, g, and b fractions of 1\n\tr /= 255\n\tg /= 255\n\tb /= 255\n\n\t// Find greatest and smallest channel values\n\tconst cmin = Math.min(r, g, b),\n\t\tcmax = Math.max(r, g, b),\n\t\tdelta = cmax - cmin\n\tlet h = 0,\n\t\ts = 0,\n\t\tl = 0\n\n\t// Calculate hue\n\t// No difference\n\tif(delta === 0){\n\t\th = 0\n\t} else if(cmax === r){\n\t\t// Red is max\n\t\th = ((g - b) / delta) % 6\n\t} else if(cmax === g){\n\t\t// Green is max\n\t\th = (b - r) / delta + 2\n\t} else {\n\t\t// Blue is max\n\t\th = (r - g) / delta + 4\n\t}\n\n\th = Math.round(h * 60)\n\n\t// Make negative hues positive behind 360°\n\tif(h < 0){\n\t\th += 360\n\t}\n\n\t// Calculate lightness\n\tl = (cmax + cmin) / 2\n\n\t// Calculate saturation\n\ts = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1))\n\n\t// Multiply l and s by 100\n\ts = +(s * 100).toFixed(1)\n\tl = +(l * 100).toFixed(1)\n\n\treturn color3ComponentsToNumber([(h / 360) * 255, (s / 100) * 255, (l / 100) * 255])\n}\n\nexport function hslToRgb(hsl: number): number {\n\tlet [h, s, l] = colorNumberTo3Components(hsl)\n\th /= 255\n\ts /= 255\n\tl /= 255\n\tlet r: number, g: number, b: number\n\n\tif(s === 0){\n\t\tr = g = b = l // achromatic\n\t} else {\n\t\tconst q = l < 0.5 ? l * (1 + s) : l + s - l * s\n\t\tconst p = 2 * l - q\n\t\tr = hueToRgb(p, q, h + 1 / 3)\n\t\tg = hueToRgb(p, q, h)\n\t\tb = hueToRgb(p, q, h - 1 / 3)\n\t}\n\n\treturn color3ComponentsToNumber([Math.floor(r * 255), Math.floor(g * 255), Math.floor(b * 255)])\n}\n\nfunction hueToRgb(p: number, q: number, t: number): number {\n\tif(t < 0){\n\t\tt += 1\n\t}\n\tif(t > 1){\n\t\tt -= 1\n\t}\n\tif(t < 1 / 6){\n\t\treturn p + (q - p) * 6 * t\n\t}\n\tif(t < 1 / 2){\n\t\treturn q\n\t}\n\tif(t < 2 / 3){\n\t\treturn p + (q - p) * (2 / 3 - t) * 6\n\t}\n\treturn p\n}\n\nexport function rgbNumberToColorString(rgb: number): string {\n\tconst b = rgb & 0xff\n\trgb >>= 8\n\tconst g = rgb & 0xff\n\trgb >>= 8\n\tconst r = rgb & 0xff\n\n\treturn \"#\" + twoHex(r) + twoHex(g) + twoHex(b)\n}\n\nexport function transformColorHsl(colorRgb: number, transform: (hsl: [number, number, number]) => [number, number, number]): number {\n\tconst transformResult = transform(\n\t\tcolorNumberTo3Components(\n\t\t\trgbToHsl(colorRgb)\n\t\t)\n\t)\n\ttransformResult[0] = Math.max(0, Math.min(255, Math.round(transformResult[0])))\n\ttransformResult[1] = Math.max(0, Math.min(255, Math.round(transformResult[1])))\n\ttransformResult[2] = Math.max(0, Math.min(255, Math.round(transformResult[2])))\n\treturn hslToRgb(\n\t\tcolor3ComponentsToNumber(\n\t\t\ttransformResult\n\t\t)\n\t)\n}","import {tag} from \"@nartallax/cardboard-dom\"\nimport {rgbNumberToColorString} from \"common/color_utils\"\nimport {addCursorMoveHandler, pointerEventsToOffsetCoords, preventContextMenu} from \"common/input_utils\"\nimport {ColorArrayDisplay} from \"sketches/wave_function_collapse/color_array_display\"\nimport * as css from \"./wave_function_collapse.module.scss\"\n\ntype PatternInputParams<T extends number = number> = {\n\treadonly palette: readonly T[]\n\treadonly defaultValue: T\n\treadonly width: number\n\treadonly height: number\n\treadonly scale: number\n}\n\ntype ColorButton<T extends number = number> = {\n\tbutton: HTMLElement\n\tcolor: T\n\tclassName: string\n}\n\nexport class PatternInput<T extends number = number> {\n\treadonly root: HTMLElement\n\n\tprivate readonly display: ColorArrayDisplay\n\tprivate pattern: readonly (T[])[]\n\tprivate primaryCb: ColorButton<T> | null = null\n\t// I had logic around having secondary color on right mouse button\n\t// but turns out mouseevent.buttons can be weird\n\t// so, whatever, I'm not solving this now\n\t// private secondaryCb: ColorButton<T> | null = null\n\n\tconstructor(private readonly params: PatternInputParams<T>) {\n\t\tthis.display = new ColorArrayDisplay(params.scale)\n\n\t\tpreventContextMenu(this.display.root)\n\t\taddCursorMoveHandler({\n\t\t\telement: this.display.root,\n\t\t\tonMove: this.onSetColorAction.bind(this),\n\t\t\tdownIsMove: true\n\t\t})\n\n\t\tthis.pattern = new Array(params.width).fill(null).map(() =>\n\t\t\tnew Array(params.height).fill(params.defaultValue)\n\t\t)\n\n\t\tconst paletteButtons = params.palette.map(color => {\n\t\t\tconst button: HTMLElement = tag({\n\t\t\t\tclass: css[\"pattern-input-palette-item\"],\n\t\t\t\tonClick: () => {\n\t\t\t\t\tthis.primaryCb = this.selectColor(this.primaryCb, button, color)\n\t\t\t\t},\n\t\t\t\t// onContextmenu: () => {\n\t\t\t\t// \tthis.secondaryCb = this.selectColor(this.secondaryCb, button, color)\n\t\t\t\t// }\n\t\t\t\tstyle: {\n\t\t\t\t\tbackgroundColor: rgbNumberToColorString(color)\n\t\t\t\t}\n\t\t\t})\n\t\t\tpreventContextMenu(button)\n\t\t\tif(color === this.params.defaultValue){\n\t\t\t\tthis.primaryCb = this.selectColor(null, button, color, css[\"selected-primary\"]!)\n\t\t\t\t// this.secondaryCb = this.selectColor(null, button, color, css[\"selected-secondary\"]!)\n\t\t\t}\n\t\t\treturn button\n\t\t})\n\n\t\tthis.root = tag({\n\t\t\tclass: css[\"pattern-input-wrap\"]\n\t\t}, [\n\t\t\tthis.display.root,\n\t\t\ttag({\n\t\t\t\tclass: css[\"pattern-input-palette-wrap\"]\n\t\t\t}, paletteButtons)\n\t\t])\n\n\t\tthis.redrawCanvas()\n\t}\n\n\tprivate redrawCanvas(): void {\n\t\tthis.display.draw(this.pattern)\n\t}\n\n\tprivate onSetColorAction(e: MouseEvent | TouchEvent): void {\n\t\tconst coords = pointerEventsToOffsetCoords(e)\n\t\tif(!coords){\n\t\t\treturn\n\t\t}\n\t\t// let isPrimary: boolean\n\t\t// if(isTouchEvent(e)){\n\t\t// \tisPrimary = true\n\t\t// } else {\n\t\t// \tisPrimary = e.buttons !== 2\n\t\t// }\n\t\tconst cellX = Math.floor(coords.x / this.params.scale)\n\t\tconst cellY = Math.floor(coords.y / this.params.scale)\n\t\tconst row = this.pattern[cellX]\n\t\tif(row && row.length > cellY){\n\t\t\t// const cb = isPrimary ? this.primaryCb : this.secondaryCb\n\t\t\tconst cb = this.primaryCb\n\t\t\tif(cb){\n\t\t\t\tthis.set(cellX, cellY, cb.color)\n\t\t\t}\n\t\t}\n\t}\n\n\tsetValue(values: T[][]): void {\n\t\tthis.pattern = JSON.parse(JSON.stringify(values))\n\t\tthis.redrawCanvas()\n\t}\n\n\tset(x: number, y: number, color: T): void {\n\t\tthis.pattern[x]![y] = color\n\t\tthis.redrawCanvas()\n\t}\n\n\tprivate selectColor(prevCb: ColorButton<T> | null, button: HTMLElement, color: T, dfltClassName = \"selected\"): ColorButton<T> {\n\t\tconst clsName = prevCb?.className ?? dfltClassName\n\t\tif(prevCb){\n\t\t\tprevCb.button.classList.remove(clsName)\n\t\t}\n\t\tconst cb: ColorButton<T> = {\n\t\t\tbutton,\n\t\t\tcolor,\n\t\t\tclassName: clsName\n\t\t}\n\t\tbutton.classList.add(clsName)\n\t\treturn cb\n\t}\n\n\tgetPattern(): number[][] {\n\t\treturn JSON.parse(JSON.stringify(this.pattern))\n\t}\n}","export function pointerEventsToClientCoords(e: MouseEvent | TouchEvent): {x: number, y: number} {\n\tif(isTouchEvent(e)){\n\t\tconst touch = e.touches[0]!\n\t\treturn {\n\t\t\tx: touch.clientX,\n\t\t\ty: touch.clientY\n\t\t}\n\t} else {\n\t\treturn {\n\t\t\tx: e.clientX,\n\t\t\ty: e.clientY\n\t\t}\n\t}\n}\n\nexport function pointerEventsToOffsetCoords(e: MouseEvent | TouchEvent): {x: number, y: number} | null {\n\tif(!(e.target instanceof HTMLElement)){\n\t\treturn null\n\t}\n\n\tconst rect = e.target.getBoundingClientRect() // performance may suck, but whatever\n\tconst coords = pointerEventsToClientCoords(e)\n\tcoords.x -= rect.left\n\tcoords.y -= rect.top\n\treturn coords\n}\n\nexport function isTouchEvent(e: MouseEvent | TouchEvent): e is TouchEvent {\n\treturn !!(e as TouchEvent).touches\n}\n\ntype CursorMoveHandlerParams = {\n\treadonly element: HTMLElement\n\tonMove(e: MouseEvent | TouchEvent): void\n\t/** If true, onMove will be invoked when down event happen */\n\treadonly downIsMove?: boolean\n\t/** If true, onMove will be invoked when up event happen */\n\treadonly upIsMove?: boolean\n}\n\n/** This is a good way to add a mousemove handler to an element */\nexport function addCursorMoveHandler(params: CursorMoveHandlerParams): void {\n\n\tconst onDown = (e: MouseEvent | TouchEvent) => {\n\t\twindow.addEventListener(\"mousemove\", params.onMove, {passive: true})\n\t\twindow.addEventListener(\"touchmove\", params.onMove, {passive: true})\n\t\twindow.addEventListener(\"mouseup\", onUp, {passive: true})\n\t\twindow.addEventListener(\"touchend\", onUp, {passive: true})\n\t\tif(params.downIsMove){\n\t\t\tparams.onMove(e)\n\t\t}\n\t}\n\n\tconst onUp = (e: MouseEvent | TouchEvent) => {\n\t\twindow.removeEventListener(\"mousemove\", params.onMove)\n\t\twindow.removeEventListener(\"touchmove\", params.onMove)\n\t\twindow.removeEventListener(\"mouseup\", onUp)\n\t\twindow.removeEventListener(\"touchend\", onUp)\n\t\tif(params.upIsMove){\n\t\t\tparams.onMove(e)\n\t\t}\n\t}\n\n\tparams.element.addEventListener(\"mousedown\", onDown, {passive: true})\n\tparams.element.addEventListener(\"touchstart\", onDown, {passive: true})\n}\n\nexport function preventContextMenu(el: HTMLElement): void {\n\tel.addEventListener(\"contextmenu\", e => {\n\t\te.preventDefault()\n\t\te.stopPropagation()\n\t\treturn false\n\t})\n}",".wave-function-collapse-root {\n\tdisplay: flex;\n\twidth: 100%;\n\theight: 100%;\n\tflex-direction: row;\n\talign-items: center;\n\n\t.pattern-input-wrap {\n\t\tpadding: 1rem;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tflex-grow: 0;\n\t\tflex-shrink: 0;\n\t\tmargin-right: 1rem;\n\t}\n\n\t.pattern-input-palette-item {\n\t\twidth: 1.5rem;\n\t\theight: 1.5rem;\n\t\tcursor: pointer;\n\t\tborder: 2px solid #222;\n\t\tborder-radius: 3px;\n\n\t\t&.selected-secondary {\n\t\t\tborder: 3px solid #999;\n\t\t}\n\n\t\t&.selected-primary {\n\t\t\tborder: 3px solid #ccc;\n\t\t}\n\t}\n\n\t.pattern-input-palette-wrap {\n\t\tpadding-top: 1rem;\n\t\tdisplay: flex;\n\t\tflex-direction: row;\n\t\twidth: 100%;\n\t\tjustify-content: center;\n\t\tflex-wrap: wrap;\n\t}\n\n}","import {Bitmap} from \"common/bitmap\"\nimport {performeter} from \"common/perfometer\"\n\ntype WaveFunctionCollapseInput<T = unknown> = {\n\t/** The source sample, from which patterns will be extracted\n\t * indexing: sourceSample[x][y]\n\t * You MUST use same referencially-equal values to represent same logical values\n\t * (that is, if you have two of the same cat in the source - they must both be represented by single instance)\n\t * (this can only matter if you use objects or something like that as T)\n\t * (otherwise it will screw up the pattern extraction) */\n\tsourceSample: T[][]\n\tpatternSize: number\n\tresultSize: {height: number, width: number}\n\tflip: boolean\n\trotate: boolean\n\trandomSeed: number\n}\n\nexport function waveFunctionCollapse<T>(params: WaveFunctionCollapseInput<T>): T[][] {\n\tperformeter.enterBlock(\"init stage\")\n\tconst {patterns, matrix} = init(params)\n\tperformeter.exitEnterBlock(\"collapse stage\")\n\n\twhile(!matrix.isEverythingCollapsed()){\n\t\tperformeter.enterBlock(\"search\")\n\t\tconst lowestEntropyPoint = matrix.findMinEntropyCell()\n\t\tif(!lowestEntropyPoint){\n\t\t\tthrow new Error(\"No lowest entropy point!\")\n\t\t}\n\t\tperformeter.exitEnterBlock(\"collapse\")\n\t\tmatrix.collapse(lowestEntropyPoint)\n\t\tperformeter.exitBlock()\n\t}\n\n\tconst patternIndices = matrix.getResults()\n\n\tperformeter.exitBlock()\n\n\treturn patternIndices.map(row => row.map(patternIndex => {\n\t\tconst pattern = patterns[patternIndex]!\n\t\treturn pattern[0]![0]!\n\t}))\n}\n\ntype XY = {x: number, y: number}\ntype PatternData<T = unknown> = readonly (readonly T[])[]\n// Array(pattern index -> Map(encoded offset -> list of available pattern indices for that offset))\ntype Rules = Map<number, Bitmap>[]\ntype InitResult<T> = {\n\tmatrix: Matrix\n\toffsets: XY[]\n\tpatterns: PatternData<T>[]\n\tpatternsFreq: number[]\n\trules: Rules\n\trandom(): number\n}\n\n/** Performs the initialization phase of the wfc algorithm, namely - aggregate the patterns from the input_examples image, calculate their frequencies and initiate the coefficient_matrix */\nfunction init<T>(params: WaveFunctionCollapseInput<T>): InitResult<T> {\n\tconst offsets = generateOffsets(params.patternSize)\n\tconst [patterns, patternsFreq] = generatePatternsAndFrequences(params)\n\tconst rules = getRules(patterns, offsets)\n\tconst random = makeRandom(params.randomSeed)\n\tconst matrix = new Matrix(params.resultSize.width, params.resultSize.height, patterns.length, random, rules, offsets, patternsFreq)\n\t// console.log(\"Rules: \", rules)\n\treturn {offsets, patterns, patternsFreq, rules, matrix, random}\n}\n\nfunction getRules<T>(patterns: PatternData<T>[], offsets: XY[]): Rules {\n\tconst result: Rules = new Array(patterns.length).fill(null).map(() => {\n\t\tconst patternsByOffset = new Map<number, Bitmap>(offsets.map(offset => [encodeOffset(offset), new Bitmap(patterns.length)]))\n\t\treturn patternsByOffset\n\t})\n\t// console.log(\"Patterns\", patterns)\n\n\tfor(const offset of offsets){\n\t\tconst encodedOffset = encodeOffset(offset)\n\t\t// console.log(`Encoded offset (${offset.x}, ${offset.y}) as ${encodedOffset}`)\n\t\tconst flipEncodedOffset = encodeOffset(flipOffset(offset))\n\t\tfor(let aIndex = 0; aIndex < patterns.length; aIndex++){\n\t\t\tconst a = patterns[aIndex]!\n\t\t\tfor(let bIndex = aIndex; bIndex < patterns.length; bIndex++){\n\t\t\t\tconst b = patterns[bIndex]!\n\t\t\t\tif(patternsHaveMatch(a, b, offset)){\n\t\t\t\t\tresult[aIndex]!.get(encodedOffset)!.set(bIndex)\n\t\t\t\t\tresult[bIndex]!.get(flipEncodedOffset)!.set(aIndex)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result\n}\n\nfunction patternsHaveMatch<T>(a: PatternData<T>, b: PatternData<T>, offset: XY): boolean {\n\tconst patternSize = a.length\n\tconst intersectionLengthX = patternSize - Math.abs(offset.x)\n\tconst intersectionLengthY = patternSize - Math.abs(offset.y)\n\n\tconst startXA = Math.min(Math.max(offset.x, 0), patternSize - intersectionLengthX)\n\tconst startYA = Math.min(Math.max(offset.y, 0), patternSize - intersectionLengthY)\n\tconst startXB = Math.min(Math.max(-offset.x, 0), patternSize - intersectionLengthX)\n\tconst startYB = Math.min(Math.max(-offset.y, 0), patternSize - intersectionLengthY)\n\n\tfor(let dx = 0; dx < intersectionLengthX; dx++){\n\t\tfor(let dy = 0; dy < intersectionLengthY; dy++){\n\t\t\tif(a[startXA + dx]![startYA + dy] !== b[startXB + dx]![startYB + dy]){\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n\treturn true\n}\n\nfunction flipOffset(offset: XY): XY {\n\treturn {x: -offset.x, y: -offset.y}\n}\n\n/** Get the coordinates around a pattern.\n * This function returns a list of all coordinates around a pattern of given size, starting from the top left and ending at the bottom right. The center point (0, 0) is excluded from the list. */\nfunction generateOffsets(patternSize: number): XY[] {\n\tconst result: XY[] = []\n\tfor(let x = -patternSize + 1; x < patternSize; x++){\n\t\tfor(let y = -patternSize + 1; y < patternSize; y++){\n\t\t\tif(x === 0 && y === 0){\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tresult.push({x, y})\n\t\t}\n\t}\n\treturn result\n}\n\nfunction encodeOffset(offset: XY): number {\n\treturn Math.abs(offset.x) << 18 | Math.abs(offset.y) << 2 | (offset.y < 0 ? 0x1 : 0) | (offset.x < 0 ? 0x2 : 0)\n}\n\nfunction encodePosition(position: XY): number {\n\treturn position.x << 16 | position.y\n}\n\nfunction decodePosition(position: number): XY {\n\treturn {\n\t\tx: (position >> 16) & 0xffff,\n\t\ty: position & 0xffff\n\t}\n}\n\nfunction normalizeArray(input: number[]): number[] {\n\tconst sum = input.reduce((a, b) => a + b, 0)\n\treturn input.map(x => x / sum)\n}\n\nfunction generatePatternsAndFrequences<T>(params: WaveFunctionCollapseInput<T>): [PatternData<T>[], number[]] {\n\tlet patterns = getPatternDataFromSource(params)\n\n\tconst hashMap = new Map<number, (PatternData<T> | null)[]>()\n\tconst hasher = new PatternHasher(params.sourceSample)\n\tfor(const pattern of patterns){\n\t\tconst hash = hasher.hash(pattern)\n\t\tlet arr = hashMap.get(hash)\n\t\tif(!arr){\n\t\t\tarr = []\n\t\t\thashMap.set(hash, arr)\n\t\t}\n\t\tarr.push(pattern)\n\t}\n\n\tconst freqMap = new Map<PatternData<T>, number>()\n\tfor(const patterns of hashMap.values()){\n\t\tfor(let i = 0; i < patterns.length; i++){\n\t\t\tconst pattern = patterns[i]\n\t\t\tif(!pattern){\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tlet count = 0\n\t\t\tfor(let j = 0; j < patterns.length; j++){\n\t\t\t\tconst otherPattern = patterns[j]\n\t\t\t\tif(!otherPattern){\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tif(patternsAreEqual(pattern, otherPattern)){\n\t\t\t\t\tpatterns[j] = null\n\t\t\t\t}\n\t\t\t\tcount++\n\t\t\t}\n\t\t\tfreqMap.set(pattern, count)\n\t\t}\n\t}\n\tpatterns = [...freqMap.keys()]\n\n\tconst freqs: number[] = []\n\tfor(const pattern of patterns){\n\t\tfreqs.push(freqMap.get(pattern)!)\n\t}\n\treturn [patterns, normalizeArray(freqs)]\n}\n\nfunction patternsAreEqual<T>(a: PatternData<T>, b: PatternData<T>): boolean {\n\tfor(let x = 0; x < a.length; x++){\n\t\tconst aRow = a[x]!\n\t\tconst bRow = b[x]!\n\t\tfor(let y = 0; y < aRow.length; y++){\n\t\t\tif(aRow[y] !== bRow[y]){\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n\treturn true\n}\n\n/** Class that is able to take fast (non-secure) hash from a pattern */\nclass PatternHasher<T> {\n\n\tprivate readonly valueIndices: Map<T, number> = new Map()\n\n\tconstructor(source: WaveFunctionCollapseInput<T>[\"sourceSample\"]) {\n\t\tconst allPossibleValues = [...new Set(flatten(source))]\n\t\tfor(let i = 0; i < allPossibleValues.length; i++){\n\t\t\tthis.valueIndices.set(allPossibleValues[i]!, i)\n\t\t}\n\t}\n\n\thash(pattern: PatternData<T>): number {\n\t\tlet hash = 0\n\n\t\tfor(let x = 0; x < pattern.length; x++){\n\t\t\tconst row = pattern[x]!\n\t\t\tfor(let y = 0; y < row.length; y++){\n\t\t\t\tconst item = row[y]!\n\t\t\t\tconst itemIndex = this.valueIndices.get(item)!\n\t\t\t\thash = ((hash << 5) - hash + (itemIndex * x * y)) | 0\n\t\t\t}\n\t\t}\n\n\t\treturn hash\n\t}\n}\n\nfunction flatten<T>(arr: readonly (readonly T[])[]): T[] {\n\tconst result: T[] = []\n\tfor(const row of arr){\n\t\tresult.push(...row)\n\t}\n\treturn result\n}\n\nfunction getPatternDataFromSource<T>(params: WaveFunctionCollapseInput<T>): PatternData<T>[] {\n\tlet patterns: PatternData<T>[] = []\n\tfor(let x = 0; x < params.sourceSample.length - params.patternSize + 1; x++){\n\t\tconst row = params.sourceSample[x]!\n\t\tfor(let y = 0; y < row.length - params.patternSize + 1; y++){\n\t\t\tpatterns.push(extractSourcePatternAt(params.sourceSample, x, y, params.patternSize))\n\t\t}\n\t}\n\n\tif(params.flip){\n\t\tconst flipped: PatternData<T>[] = []\n\t\tfor(const axis of [\"x\", \"y\"] as const){\n\t\t\tfor(const pattern of patterns){\n\t\t\t\tflipped.push(flipPattern(pattern, axis))\n\t\t\t}\n\t\t}\n\t\tpatterns = [...patterns, ...flipped]\n\t}\n\n\tif(params.rotate){\n\t\tconst rotated: PatternData<T>[] = []\n\t\tfor(const count of [1, 2, 3] as const){\n\t\t\tfor(const pattern of patterns){\n\t\t\t\trotated.push(rotatePattern(pattern, count))\n\t\t\t}\n\t\t}\n\t\tpatterns = [...patterns, ...rotated]\n\t}\n\n\treturn patterns\n}\n\nfunction extractSourcePatternAt<T>(source: WaveFunctionCollapseInput<T>[\"sourceSample\"], x: number, y: number, size: number): PatternData<T> {\n\tconst result: T[][] = []\n\tfor(let dx = 0; dx < size; dx++){\n\t\tconst row = source[x + dx]!\n\t\tresult.push(row.slice(y, y + size))\n\t}\n\treturn result\n}\n\nfunction copyPattern<T>(pattern: PatternData<T>): T[][] {\n\tconst result: T[][] = []\n\tfor(let x = 0; x < pattern.length; x++){\n\t\tresult.push([...pattern[x]!])\n\t}\n\treturn result\n}\n\nfunction flipPattern<T>(pattern: PatternData<T>, axis: \"x\" | \"y\"): PatternData<T> {\n\tconst res = copyPattern(pattern)\n\tconst halfLen = Math.floor(pattern.length / 2)\n\tif(axis === \"x\"){\n\t\tfor(let dx = 0; dx < halfLen; dx++){\n\t\t\tconst rowA = res[dx]!\n\t\t\tconst rowB = res[res.length - dx - 1]!\n\t\t\tfor(let y = 0; y < rowA.length; y++){\n\t\t\t\tconst tmp = rowA[y]!\n\t\t\t\trowA[y] = rowB[y]!\n\t\t\t\trowB[y] = tmp\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfor(let x = 0; x < pattern.length; x++){\n\t\t\tconst row = res[x]!\n\t\t\tfor(let dy = 0; dy < halfLen; dy++){\n\t\t\t\tconst tmp = row[dy]!\n\t\t\t\trow[dy] = row[row.length - dy - 1]!\n\t\t\t\trow[row.length - dy - 1] = tmp\n\t\t\t}\n\t\t}\n\t}\n\treturn res\n}\n\nfunction rotatePattern<T>(pattern: PatternData<T>, times: 1 | 2 | 3): PatternData<T> {\n\tconst res = copyPattern(pattern)\n\tconst size = pattern.length\n\tconst halfSize = Math.floor(size / 2)\n\tfor(let i = 0; i < times; i++){\n\t\tfor(let circleOffset = 0; circleOffset < halfSize; circleOffset++){\n\t\t\tconst lastPos = size - circleOffset - 1\n\t\t\tfor(let posOffset = circleOffset; posOffset < size - circleOffset - 1; posOffset++){\n\t\t\t\tconst tmp = res[posOffset]![circleOffset]!\n\t\t\t\tres[posOffset]![circleOffset] = res[lastPos]![posOffset]!\n\t\t\t\tres[lastPos]![posOffset] = res[size - posOffset - 1]![lastPos]!\n\t\t\t\tres[size - posOffset - 1]![lastPos] = res[circleOffset]![size - posOffset - 1]!\n\t\t\t\tres[circleOffset]![size - posOffset - 1] = tmp\n\t\t\t}\n\t\t}\n\t}\n\treturn res\n}\n\nclass Matrix {\n\tprivate readonly entropy: number[]\n\tprivate readonly matrix: Bitmap\n\tprivate readonly collapseMask: Bitmap\n\tprivate readonly patternCount: number\n\tprivate incollapsedCellsCount: number\n\n\tconstructor(\n\t\tprivate readonly width: number,\n\t\tprivate readonly height: number,\n\t\tpatternCount: number,\n\t\tprivate readonly random: () => number,\n\t\tprivate readonly rules: Rules,\n\t\tprivate readonly offsets: XY[],\n\t\tprivate readonly freqs: number[]\n\t) {\n\t\tthis.patternCount = Math.ceil(patternCount / 8) * 8\n\t\tthis.entropy = new Array(width * height).fill(1)\n\t\tthis.matrix = new Bitmap(width * height * this.patternCount)\n\t\tthis.collapseMask = new Bitmap(width * height)\n\t\tthis.incollapsedCellsCount = width * height\n\n\t\tthis.matrix.setAll()\n\t\tconst paddingPatternCount = this.patternCount - patternCount\n\t\tfor(let i = 0; i < width * height; i++){\n\t\t\tconst cellEnd = ((i + 1) * this.patternCount) - 1\n\t\t\tfor(let offset = 0; offset < paddingPatternCount; offset++){\n\t\t\t\tthis.matrix.clear(cellEnd - offset)\n\t\t\t}\n\t\t}\n\t}\n\n\tisEverythingCollapsed(): boolean {\n\t\treturn this.incollapsedCellsCount === 0\n\t}\n\n\tfindMinEntropyCell(): XY | null {\n\t\tlet minEntropy = Number.MAX_SAFE_INTEGER\n\t\tconst cells: number[] = []\n\t\tfor(let i = 0; i < this.entropy.length; i++){\n\t\t\tif(this.collapseMask.get(i)){\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tconst entropy = this.entropy[i]!\n\t\t\tif(entropy < minEntropy){\n\t\t\t\tcells.length = 0\n\t\t\t\tminEntropy = entropy\n\t\t\t}\n\t\t\tif(entropy === minEntropy){\n\t\t\t\tcells.push(i)\n\t\t\t}\n\t\t}\n\t\tif(cells.length === 0){\n\t\t\treturn null\n\t\t}\n\n\t\t// console.log(`Lowest entropy cells are at ${minEntropy}: `, cells.map(index => ({x: index % this.width, y: Math.floor(index / this.width)})))\n\n\t\tconst index = cells.length === 1 ? cells[0]! : cells[Math.floor(this.random() * cells.length)]!\n\t\treturn {x: index % this.width, y: Math.floor(index / this.width)}\n\t}\n\n\tcollapse(cell: XY): void {\n\t\tperformeter.enterBlock(\"collapse-set\")\n\t\t// console.log(`Collapsing at (${cell.x}, ${cell.y}): \\n${this}`)\n\t\tconst cellIndex = cell.y * this.width + cell.x\n\t\tconst availableValues = this.matrix.getOffsetsAsNumbers(cellIndex * this.patternCount, this.patternCount)\n\t\tif(availableValues.length === 0){\n\t\t\t// should be caught on propagate stage tbh\n\t\t\tthrow new Error(`Cell at (${cell.x}, ${cell.y}) don't have available values`)\n\t\t}\n\t\tthis.collapseMask.set(cellIndex)\n\t\tthis.incollapsedCellsCount--\n\t\tif(availableValues.length === 1){\n\t\t\tperformeter.exitBlock()\n\t\t\treturn // it's already kinda collapsed, no action required\n\t\t}\n\t\tconst selectedValue = availableValues[Math.floor(this.random() * availableValues.length)]!\n\t\t// console.log(\"Selected value: \" + selectedValue)\n\t\t// console.log(ruleToString(this.rules[selectedValue]!))\n\t\tfor(const value of availableValues){\n\t\t\tif(value === selectedValue){\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tthis.matrix.clear(cellIndex * this.patternCount + value)\n\t\t}\n\t\tthis.entropy[cellIndex] = 0\n\t\tperformeter.exitEnterBlock(\"propagate\")\n\t\tthis.propagateStartingAt(cell)\n\t\tperformeter.exitBlock()\n\t}\n\n\tprivate isInBounds(coords: XY): boolean {\n\t\treturn coords.x >= 0 && coords.y >= 0 && coords.x < this.width && coords.y < this.height\n\t}\n\n\tprivate propagateStartingAt(cell: XY): void {\n\t\tconst queue = new SetQueue<number>()\n\t\tqueue.enqueue(encodePosition(cell))\n\n\t\twhile(true){\n\t\t\tconst origCellEncoded = queue.dequeue()\n\t\t\tif(origCellEncoded === undefined || origCellEncoded === null){\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tconst origCell = decodePosition(origCellEncoded)\n\t\t\t// console.log(`Propagating at (${origCell.x}, ${origCell.y})`)\n\n\t\t\tfor(const offset of this.offsets){\n\t\t\t\tconst adjacentCellPos = {x: origCell.x + offset.x, y: origCell.y + offset.y}\n\t\t\t\tif(!this.isInBounds(adjacentCellPos)){\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tconst adjacentCellIndex = adjacentCellPos.y * this.width + adjacentCellPos.x\n\t\t\t\tif(this.collapseMask.get(adjacentCellIndex)){\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\tconst changed = this.propagateToCellByOffset(origCell, offset)\n\t\t\t\tif(changed){\n\t\t\t\t\tqueue.enqueue(encodePosition(adjacentCellPos))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate propagateToCellByOffset(origCell: XY, offset: XY): boolean {\n\t\t// TODO: optimise here\n\t\tperformeter.enterBlock(\"assemble_pattern\")\n\t\tconst encodedOffset = encodeOffset(offset)\n\t\tconst origCellIndex = origCell.y * this.width + origCell.x\n\t\tperformeter.enterBlock(\"get offsets\")\n\t\tconst origCellPatterns = this.matrix.getOffsetsAsNumbers(origCellIndex * this.patternCount, this.patternCount)\n\t\tperformeter.exitEnterBlock(\"OR pattern\")\n\t\tconst resultTargetCellPatterns = new Bitmap(this.patternCount)\n\t\tfor(const origPattern of origCellPatterns){\n\t\t\tconst patternsByRule = this.rules[origPattern]!.get(encodedOffset)!\n\t\t\tresultTargetCellPatterns.orFromTheStart(patternsByRule)\n\t\t}\n\t\tperformeter.exitBlock()\n\n\t\tperformeter.exitEnterBlock(\"apply_pattern\")\n\t\tconst targetCell = {x: origCell.x + offset.x, y: origCell.y + offset.y}\n\t\tconst targetCellIndex = targetCell.y * this.width + targetCell.x\n\t\tconst hasChange = this.matrix.and(resultTargetCellPatterns, targetCellIndex * this.patternCount)\n\t\tif(hasChange){\n\t\t\tthis.entropy[targetCellIndex] = this.matrix.getOffsetsAsNumbers(targetCellIndex * this.patternCount, this.patternCount)\n\t\t\t\t.map(pattern => this.freqs[pattern]!)\n\t\t\t\t.reduce((a, b) => a + b, 0)\n\t\t}\n\t\tperformeter.exitBlock()\n\t\treturn hasChange\n\t}\n\n\tgetResults(): number[][] {\n\t\tconst result: number[][] = []\n\t\tfor(let x = 0; x < this.width; x++){\n\t\t\tconst row: number[] = []\n\t\t\tresult.push(row)\n\t\t\tfor(let y = 0; y < this.height; y++){\n\t\t\t\tconst index = y * this.width + x\n\t\t\t\tconst patterns = this.matrix.getOffsetsAsNumbers(index * this.patternCount, this.patternCount)\n\t\t\t\trow.push(patterns[0]!)\n\t\t\t}\n\t\t}\n\t\treturn result\n\t}\n\n\ttoString(): string {\n\t\tlet longestCellLen = 0\n\t\tconst result: string[][] = []\n\t\tfor(let y = 0; y < this.height; y++){\n\t\t\tconst row: string[] = []\n\t\t\tresult.push(row)\n\t\t\tfor(let x = 0; x < this.width; x++){\n\t\t\t\tconst index = y * this.width + x\n\t\t\t\tconst patterns = this.matrix.getOffsetsAsNumbers(index * this.patternCount, this.patternCount)\n\t\t\t\tconst str = shortenNumberSpan(patterns)\n\t\t\t\trow.push(str)\n\t\t\t\tlongestCellLen = Math.max(longestCellLen, str.length)\n\t\t\t}\n\t\t}\n\t\treturn result.map(row => row.map(cell => whitePad(cell, longestCellLen)).join(\" | \")).join(\"\\n\")\n\t}\n\n}\n\nfunction whitePad(str: string, len: number): string {\n\twhile(str.length < len){\n\t\tstr += \" \"\n\t}\n\treturn str\n}\n\nfunction makeRandom(seed: number): () => number {\n\tseed ^= 0xDEADBEEF\n\t// Pad seed with Phi, Pi and E.\n\t// https://en.wikipedia.org/wiki/Nothing-up-my-sleeve_number\n\tconst rand = sfc32(0x9E3779B9, 0x243F6A88, 0xB7E15162, seed)\n\tfor(let i = 0; i < 15; i++){\n\t\trand()\n\t}\n\treturn rand\n}\n\nfunction sfc32(a: number, b: number, c: number, d: number) {\n\treturn function() {\n\t\ta >>>= 0; b >>>= 0; c >>>= 0; d >>>= 0\n\t\tlet t = (a + b) | 0\n\t\ta = b ^ b >>> 9\n\t\tb = c + (c << 3) | 0\n\t\tc = (c << 21 | c >>> 11)\n\t\td = d + 1 | 0\n\t\tt = t + d | 0\n\t\tc = c + t | 0\n\t\treturn (t >>> 0) / 4294967296\n\t}\n}\n\nclass SetQueue<T> {\n\tprivate readonly set = new Set<T>()\n\tprivate readonly queue: (T | null)[] = []\n\tprivate pos = 0\n\n\tenqueue(value: T): boolean {\n\t\tif(this.set.has(value)){\n\t\t\treturn false\n\t\t}\n\t\tthis.set.add(value)\n\t\tthis.queue.push(value)\n\t\treturn true\n\t}\n\n\tdequeue(): T | null | undefined {\n\t\tconst result = this.queue[this.pos]\n\t\tthis.queue[this.pos] = null\n\t\tif(this.queue.length > this.pos){\n\t\t\tthis.set.delete(result!)\n\t\t\tthis.pos++\n\t\t}\n\t\treturn result\n\t}\n}\n\n/** Format sequence of numbers in a shorter manner, compressing sequental spans into from-to format */\nfunction shortenNumberSpan(nums: number[]): string {\n\treturn joinSpans(nums, (a, b) => a + 1 === b).map(span => {\n\t\tconst first = span[0]!\n\t\tconst last = span[span.length - 1]!\n\t\tif(first === last){\n\t\t\treturn first + \"\"\n\t\t} else if(first + 1 === last){\n\t\t\treturn first + \",\" + last\n\t\t} else {\n\t\t\treturn first + \"-\" + last\n\t\t}\n\t}).join(\",\")\n}\n\nfunction joinSpans<T>(values: T[], shouldJoin: (a: T, b: T) => boolean): T[][] {\n\tconst result: T[][] = []\n\tif(values.length === 0){\n\t\treturn result\n\t}\n\tlet currentSpan: T[] = [values[0]!]\n\tresult.push(currentSpan)\n\n\tfor(let i = 1; i < values.length; i++){\n\t\tconst v = values[i]!\n\t\tif(shouldJoin(currentSpan[currentSpan.length - 1]!, v)){\n\t\t\tcurrentSpan.push(v)\n\t\t} else {\n\t\t\tcurrentSpan = [v]\n\t\t\tresult.push(currentSpan)\n\t\t}\n\t}\n\n\treturn result\n}","/** An optimized array of bits (booleans) */\nexport class Bitmap {\n\tprivate readonly arr: Uint8Array\n\tconstructor(readonly size: number) {\n\t\tif(size < 0){\n\t\t\tthrow new Error(`Expected non-negative as size, got ${size}`)\n\t\t}\n\n\t\tif(size % 8){\n\t\t\tsize = Math.ceil(size / 8) * 8\n\t\t}\n\n\t\tthis.arr = new Uint8Array(size >> 3)\n\t}\n\n\t/** Set bit at selected index to 1 */\n\tset(index: number): void {\n\t\tconst arr = this.arr\n\t\tconst byteIndex = index >> 3\n\t\tarr[byteIndex] = arr[byteIndex]! | (1 << (index & 0b111))\n\t}\n\n\t/** Set bit at selected index to 0 */\n\tclear(index: number): void {\n\t\tconst arr = this.arr\n\t\tconst byteIndex = index >> 3\n\t\tarr[byteIndex] = arr[byteIndex]! & (~(1 << (index & 0b111)))\n\t}\n\n\t/** Get value of bit at index */\n\tget(index: number): boolean {\n\t\treturn (this.arr[index >> 3]! & (1 << (index & 0b111))) !== 0\n\t}\n\n\t/** Set value of all the bits to 1 */\n\tsetAll(): void {\n\t\tthis.arr.fill(0xff)\n\t}\n\n\t/** Set value of all the bits to 0 */\n\tclearAll(): void {\n\t\tthis.arr.fill(0)\n\t}\n\n\t/** @returns sorted array of offsets within [start, start + length] */\n\tgetOffsetsAsNumbers(start: number, length: number): number[] {\n\t\tif(start & 0x7 || length & 0x7){\n\t\t\tthrow new Error(\"Assertion failed, only byte-aligned start/length is supported\")\n\t\t}\n\t\tconst result: number[] = []\n\t\tlet i = 0\n\t\tfor(let byteOffset = 0; byteOffset < (length >> 3); byteOffset++){\n\t\t\tconst byte = this.arr[(start >> 3) + byteOffset]!\n\t\t\tlet mask = 0x1\n\t\t\twhile(mask !== 0x100){\n\t\t\t\tif(byte & mask){\n\t\t\t\t\tresult.push(i)\n\t\t\t\t}\n\t\t\t\ti++\n\t\t\t\tmask <<= 1\n\t\t\t}\n\t\t}\n\t\treturn result\n\t}\n\n\t/** Sets to 1 every offset that is present in array of offsets and to 0 everything else\n\t * @param offsets sorted array of offsets\n\t * @returns if anything was changed */\n\tsetOffsetsByNumbers(start: number, length: number, offsets: number[]): boolean {\n\t\tif(start & 0x7 || length & 0x7){\n\t\t\tthrow new Error(\"Assertion failed, only byte-aligned start/length is supported\")\n\t\t}\n\t\tlet hasChange = false\n\t\tlet offset = 0\n\t\tlet offsetIndex = 0\n\t\tlet nextNonzeroOffset = offsets[offsetIndex]\n\t\tfor(let byteOffset = 0; byteOffset < (length >> 3); byteOffset++){\n\t\t\tconst origByte = this.arr[(start >> 3) + byteOffset]!\n\t\t\tlet byte = 0\n\t\t\tlet mask = 0x1\n\t\t\twhile(mask !== 0x100){\n\t\t\t\tconst bit = offset === nextNonzeroOffset ? mask : 0\n\t\t\t\thasChange = hasChange || (origByte & mask) !== bit\n\t\t\t\tif(bit){\n\t\t\t\t\tbyte |= mask\n\t\t\t\t\toffsetIndex++\n\t\t\t\t\tnextNonzeroOffset = offsets[offsetIndex]\n\t\t\t\t}\n\t\t\t\toffset++\n\t\t\t\tmask <<= 1\n\t\t\t}\n\t\t\tthis.arr[(start >> 3) + byteOffset] = byte\n\t\t}\n\t\treturn hasChange\n\t}\n\n\t/** Applies bitwise-and operation to this bitmap; saves result in this bitmap\n\t * Expecting other bitmap to be smaller than this one\n\t * @returns if this bitmap was changed\n\t */\n\tand(other: Bitmap, startThis: number): boolean {\n\t\tif(startThis & 0x7){\n\t\t\tthrow new Error(\"Assertion failed, only byte-aligned start/length is supported\")\n\t\t}\n\t\tlet hasChange = false\n\t\tfor(let byteOffset = 0; byteOffset < other.arr.length; byteOffset++){\n\t\t\tconst thisByte = this.arr[(startThis >> 3) + byteOffset]!\n\t\t\tconst otherByte = other.arr[byteOffset]!\n\t\t\tconst result = thisByte & otherByte\n\t\t\thasChange = hasChange || (result !== thisByte)\n\t\t\tthis.arr[(startThis >> 3) + byteOffset] = result\n\t\t}\n\t\treturn hasChange\n\t}\n\n\torFromTheStart(other: Bitmap): void {\n\t\tif(other.arr.length > this.arr.length){\n\t\t\tthrow new Error(\"Assertion failed, lengths are not equal\")\n\t\t}\n\t\tfor(let byteOffset = 0; byteOffset < other.arr.length; byteOffset++){\n\t\t\tthis.arr[byteOffset] = this.arr[byteOffset]! | other.arr[byteOffset]!\n\t\t}\n\t}\n\n}","[[16754689,16754689,16754689,16754689,16754689,16754689,16754689,16754689,26776,26776,26776,26776,16754689,16754689,26776,26776,26776,26776,16754689,16754689,26776,26776,26776,26776,26776,26776,16754689,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16754689,26776,26776,26776,26776,26776,16754689,16754689,16754689,26776,26776],[26776,26776,26776,16754689,16754689,26776,26776,26776,26776,26776,26776,16754689,16754689,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16754689,16771843,16754689,16754689,26776,26776,26776,26776,26776,26776,16754689,16754689,16771843,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,26776],[26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16771843,16771843,16754689,16754689,26776,26776,26776,26776,26776,26776,16754689,16754689,16754689,16771843,16771843,16771843,16771843,16754689,16754689,26776,26776,26776,26776,16754689,16754689,16771843,16771843,16771843,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776],[26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16771843,16771843,14817887,16771843,16754689,16754689,26776,26776,26776,26776,16754689,16754689,16771843,16771843,16771843,16771843,14817887,16771843,16754689,16754689,26776,26776,26776,26776,16754689,16754689,16771843,14817887,16771843,16771843,16754689,26776,26776,26776,26776,26776,26776,26776,16754689],[26776,26776,16754689,16754689,16754689,26776,26776,26776,26776,26776,16754689,16754689,16771843,16771843,16771843,16771843,16754689,16754689,26776,26776,16754689,16754689,16771843,16771843,16771843,14817887,16771843,16771843,16771843,16754689,16754689,26776,26776,26776,26776,16754689,16754689,16771843,16771843,16771843,16771843,16754689,16754689,26776,26776,26776,26776,16754689,16754689,16754689],[26776,16754689,16754689,16771843,16754689,16754689,16754689,26776,26776,26776,26776,16754689,16754689,16771843,14817887,16771843,16771843,16754689,26776,26776,16754689,16754689,16771843,14817887,16771843,16771843,16771843,16771843,16754689,16754689,26776,26776,26776,26776,26776,26776,16754689,16754689,16771843,14817887,16771843,16771843,16754689,26776,26776,26776,16754689,16754689,16771843,16771843],[16754689,16754689,16771843,16771843,16771843,16771843,16754689,16754689,26776,26776,26776,26776,16754689,16754689,16771843,16771843,16754689,16754689,26776,26776,16754689,16754689,16771843,16771843,16771843,16771843,16754689,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16771843,16771843,16754689,16754689,26776,26776,16754689,16754689,16771843,16771843,16771843],[16754689,16771843,16771843,14817887,16771843,16771843,16771843,16754689,16754689,26776,26776,26776,26776,16754689,16754689,16754689,16754689,26776,26776,26776,26776,16754689,16754689,16771843,16754689,16754689,16754689,26776,26776,26776,26776,26776,16754689,16754689,26776,26776,26776,26776,16754689,16754689,16754689,16754689,26776,26776,26776,16754689,16771843,16771843,14817887,16771843],[16754689,16754689,16771843,16771843,16771843,14817887,16771843,16771843,16754689,16754689,26776,26776,26776,26776,16754689,16754689,26776,26776,26776,26776,26776,26776,16754689,16754689,16754689,26776,26776,26776,26776,26776,26776,16754689,16754689,16754689,16754689,26776,26776,26776,26776,16754689,16754689,26776,26776,26776,26776,16754689,16754689,16771843,16771843,16771843],[26776,16754689,16754689,16771843,16771843,16771843,16771843,14817887,16771843,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16771843,16771843,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16771843,14817887],[26776,26776,16754689,16754689,16754689,16771843,16771843,16771843,16771843,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16771843,14817887,16771843,16771843,16754689,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16771843],[26776,26776,26776,26776,16754689,16754689,16754689,16771843,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16771843,16771843,16771843,16771843,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689],[26776,26776,26776,26776,26776,26776,16754689,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16771843,16771843,14817887,16771843,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,16754689],[16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16771843,14817887,16771843,16771843,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16754689,26776,26776,26776,26776],[16771843,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16771843,16771843,16771843,16771843,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16771843,16754689,16754689,26776,26776,26776],[14817887,16771843,16754689,16754689,16754689,26776,26776,26776,26776,26776,16754689,16754689,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16771843,16771843,14817887,16771843,16771843,16754689,26776,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16771843,16771843,16771843,16754689,16754689,26776,26776],[16771843,16771843,16771843,16771843,16754689,16754689,26776,26776,26776,16754689,16754689,16771843,16771843,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16771843,16771843,16771843,16771843,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16771843,16771843,14817887,16771843,16754689,16754689,26776,26776],[16771843,14817887,16771843,16771843,16771843,16754689,16754689,26776,26776,16754689,16771843,16771843,14817887,16771843,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16771843,16771843,14817887,16771843,16771843,16754689,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16771843,16771843,16754689,16754689,26776,26776,26776],[16771843,16771843,16771843,14817887,16771843,16771843,16754689,26776,26776,16754689,16754689,16771843,16771843,16771843,16771843,16754689,16754689,26776,26776,26776,26776,26776,26776,16754689,16754689,16771843,16771843,16771843,16771843,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16754689,16754689,26776,26776,26776,26776],[14817887,16771843,16771843,16771843,16771843,16754689,16754689,26776,26776,26776,16754689,16771843,16771843,14817887,16771843,16754689,16754689,26776,26776,26776,26776,26776,16754689,16754689,16771843,16771843,14817887,16771843,16771843,16754689,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,26776,26776,26776,26776,26776],[16771843,16771843,14817887,16771843,16771843,16754689,26776,26776,26776,26776,16754689,16754689,16771843,16771843,16754689,16754689,26776,26776,26776,26776,26776,16754689,16754689,16771843,14817887,16771843,16771843,16771843,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689],[16771843,16771843,16771843,16771843,16754689,16754689,26776,26776,26776,26776,26776,16754689,16754689,16754689,16754689,26776,26776,26776,26776,26776,16754689,16754689,16771843,16771843,16771843,16771843,16771843,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16771843,16754689,16754689,26776,26776,26776,26776,26776,26776,16754689,16754689,16754689],[16771843,14817887,16771843,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,26776,26776,26776,26776,26776,16754689,16754689,16771843,16771843,14817887,16771843,16754689,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16771843,16771843,16771843,16754689,16754689,26776,26776,26776,26776,16754689,16754689,16771843,16771843],[16771843,16771843,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16771843,14817887,16771843,16771843,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16771843,16771843,14817887,16771843,16754689,16754689,26776,26776,26776,16754689,16754689,16771843,14817887,16771843],[16771843,16754689,16754689,26776,26776,26776,26776,26776,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16771843,16771843,16771843,16771843,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16771843,16771843,16754689,16754689,26776,26776,26776,16754689,16754689,16771843,16771843,16771843,16771843],[16771843,16754689,26776,26776,26776,26776,26776,16754689,16754689,16754689,16754689,26776,26776,26776,26776,26776,26776,16754689,16754689,16771843,14817887,16771843,16771843,16754689,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16754689,16754689,26776,26776,26776,26776,16754689,16771843,16771843,14817887,16771843,16771843],[16754689,16754689,26776,26776,26776,26776,16754689,16754689,16771843,16771843,16754689,16754689,26776,26776,26776,26776,26776,26776,16754689,16754689,16771843,16771843,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,26776,26776,26776,26776,26776,16754689,16754689,16771843,16771843,16771843,16754689],[16754689,26776,26776,26776,26776,16754689,16754689,16771843,14817887,16771843,16771843,16754689,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16754689,16754689,16754689],[26776,26776,26776,26776,16754689,16754689,16771843,16771843,16771843,16771843,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16754689,26776],[26776,26776,26776,26776,16754689,16771843,16771843,14817887,16771843,16771843,16754689,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16771843,16771843,16754689,16754689,26776,26776,26776,26776,26776,16754689,16754689,16754689,26776,26776,26776,26776,26776,26776,26776],[26776,26776,26776,16754689,16754689,16771843,16771843,16771843,16771843,16754689,16754689,26776,26776,26776,26776,16754689,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16754689,16771843,14817887,16771843,16771843,16754689,26776,26776,26776,26776,16754689,16754689,16771843,16754689,16754689,26776,26776,26776,26776,26776,26776],[26776,26776,16754689,16754689,16771843,16771843,14817887,16771843,16771843,16754689,26776,26776,26776,26776,16754689,16754689,16754689,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16771843,16771843,16771843,16771843,16771843,16754689,16754689,26776,26776,26776,16754689,16754689,16771843,16771843,16771843,16754689,16754689,26776,26776,26776,26776,26776],[26776,16754689,16754689,16771843,14817887,16771843,16771843,16771843,16754689,16754689,26776,26776,26776,16754689,16754689,16771843,16771843,16771843,16754689,16754689,26776,26776,26776,26776,26776,16754689,16754689,16771843,16771843,16771843,14817887,16771843,16754689,16754689,26776,26776,26776,26776,16754689,16771843,16771843,14817887,16771843,16754689,16754689,26776,26776,26776,26776,16754689],[26776,16754689,16754689,16771843,16771843,16771843,16771843,16754689,16754689,26776,26776,26776,26776,16754689,16771843,16771843,14817887,16771843,16771843,16754689,26776,26776,26776,26776,26776,16754689,16754689,16771843,14817887,16771843,16771843,16754689,16754689,26776,26776,26776,26776,26776,16754689,16754689,16771843,16771843,16754689,16754689,26776,26776,26776,26776,16754689,16754689],[26776,26776,16754689,16754689,16771843,16754689,16754689,16754689,26776,26776,26776,26776,16754689,16754689,16771843,16771843,16771843,16771843,16754689,16754689,26776,26776,26776,26776,26776,26776,16754689,16754689,16771843,16771843,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16754689,16754689,26776,26776,26776,26776,16754689,16754689,16771843],[26776,26776,26776,16754689,16754689,16754689,26776,26776,26776,26776,26776,16754689,16754689,16771843,16771843,14817887,16771843,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,26776,26776,26776,26776,16754689,16754689,16771843,16771843],[26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16771843,14817887,16771843,16771843,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16771843,14817887,16771843],[26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16771843,16771843,16771843,16754689,16754689,26776,26776,26776,26776,26776,16754689,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16771843,16771843,16771843,16771843],[16754689,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16771843,16754689,16754689,26776,26776,26776,26776,26776,16754689,16754689,16771843,16754689,16754689,26776,26776,26776,26776,26776,26776,16754689,16754689,16771843,16754689,16754689,16754689,26776,26776,26776,26776,26776,26776,16754689,16754689,16771843,14817887,16771843,16771843],[16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16754689,26776,26776,26776,26776,26776,16754689,16754689,16771843,16771843,16771843,16754689,16754689,26776,26776,26776,26776,16754689,16754689,16771843,16771843,16771843,16771843,16754689,16754689,16754689,26776,26776,26776,26776,26776,16754689,16754689,16771843,16771843,16754689],[16771843,16754689,26776,26776,26776,26776,16754689,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16771843,14817887,16771843,16771843,16754689,26776,26776,26776,26776,16754689,16771843,16771843,14817887,16771843,16771843,16771843,16771843,16754689,16754689,16754689,26776,26776,26776,26776,16754689,16754689,16754689,16754689],[16754689,16754689,26776,26776,26776,16754689,16754689,16754689,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16771843,16771843,16754689,16754689,26776,26776,26776,16754689,16754689,16771843,16771843,16771843,16771843,14817887,16771843,16771843,16771843,16771843,16754689,16754689,26776,26776,26776,26776,16754689,16754689,26776],[16754689,26776,26776,26776,16754689,16754689,16771843,16771843,16771843,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16754689,16754689,26776,26776,26776,26776,16754689,16771843,16771843,14817887,16771843,16771843,16771843,16771843,14817887,16771843,16771843,16771843,16754689,16754689,26776,26776,26776,26776,26776,26776],[26776,26776,26776,26776,16754689,16771843,16771843,14817887,16771843,16771843,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,26776,26776,26776,26776,16754689,16754689,16771843,16771843,16771843,16771843,14817887,16771843,16771843,16771843,16771843,14817887,16771843,16771843,16754689,26776,26776,26776,26776,26776,26776],[26776,26776,26776,26776,16754689,16754689,16771843,16771843,16771843,14817887,16771843,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16771843,16771843,14817887,16771843,16771843,16771843,16771843,14817887,16771843,16771843,16771843,16771843,16754689,16754689,26776,26776,26776,26776,26776,16754689],[16754689,26776,26776,26776,26776,16754689,16754689,16771843,16771843,16771843,16771843,16771843,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16771843,16771843,16771843,16771843,14817887,16771843,16771843,16771843,16771843,14817887,16771843,16771843,16754689,26776,26776,26776,26776,16754689,16754689,16754689],[16754689,16754689,26776,26776,26776,26776,16754689,16754689,16754689,16771843,14817887,16771843,16771843,16754689,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,26776,26776,26776,26776,16754689,16771843,16771843,14817887,16771843,16771843,16771843,16771843,14817887,16771843,16771843,16771843,16771843,16754689,16754689,26776,26776,26776,16754689,16754689,16771843,16771843],[16754689,16754689,26776,26776,26776,26776,26776,26776,16754689,16754689,16771843,16771843,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16754689,16754689,26776,26776,26776,16754689,16754689,16771843,16771843,16771843,14817887,16771843,16771843,16771843,16771843,14817887,16771843,16771843,16754689,26776,26776,26776,16754689,16754689,16771843,16771843,16771843],[16754689,26776,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16771843,16771843,16754689,16754689,26776,26776,26776,16754689,16754689,16771843,16771843,16771843,16771843,14817887,16771843,16771843,16771843,16771843,16754689,16754689,26776,26776,26776,16754689,16771843,16771843,14817887,16771843],[16754689,26776,26776,26776,16754689,16754689,26776,26776,26776,26776,16754689,16754689,26776,26776,26776,26776,26776,26776,26776,16754689,16754689,16771843,14817887,16771843,16771843,16754689,26776,26776,26776,26776,16754689,16754689,16754689,16771843,16771843,16771843,16771843,14817887,16771843,16771843,16754689,26776,26776,26776,16754689,16754689,16771843,16771843,16771843,16771843]]","[[26776,26776,26776,26776,26776,26776,26776,26776,26776,26776],[26776,26776,26776,16754689,16754689,26776,26776,26776,26776,26776],[26776,26776,16754689,16771843,16771843,16754689,16754689,16754689,26776,26776],[26776,26776,16754689,16771843,16771843,16771843,16771843,16771843,16754689,26776],[26776,26776,26776,16754689,16771843,5487617,16771843,16771843,16754689,26776],[26776,26776,26776,16754689,16771843,16771843,16771843,16771843,16754689,26776],[26776,26776,26776,16754689,16771843,16771843,16771843,16771843,16754689,26776],[26776,26776,26776,26776,16754689,16754689,16754689,16754689,26776,26776],[26776,26776,26776,26776,26776,26776,26776,26776,26776,26776],[26776,26776,26776,26776,26776,26776,26776,26776,26776,26776]]"],"names":["$8HcCf","parcelRequire","$02ba7994cbb01639$export$f22da7240b7add18","root","patternInput","$ffFvw","PatternInput","palette","defaultValue","height","width","scale","display","$jVGbq","ColorArrayDisplay","appendChild","$7sHgZ","tag","class","$9sNwz","onClick","source","getPattern","console","log","JSON","stringify","result","$1OdCr","waveFunctionCollapse","flip","rotate","sourceSample","patternSize","randomSeed","resultSize","draw","performeter","print","reset","setValue","$f9tgb","$6f792b9b35387246$export$e1ee22bc4cc102ea","this","makeBlock","currentBlock","eventCounters","parent","subblocks","timeStart","timeSum","enterCount","enterBlock","name","nextBlock","performance","now","recordEvent","exitBlock","Error","exitEnterBlock","table","fullTime","forEachBlock","block","depth","Array","join","$6f792b9b35387246$var$strip","callback","start","currentDepth","subblock","v","Math","round","$96d2a9ef9a2c2245$export$5640fc17115cf007","constructor","canvas","context","getContext","values","w","length","h","setAttribute","style","s","x","row","y","fillStyle","$efatB","rgbNumberToColorString","fillRect","$fa4a5aa5cdd6ce8e$var$twoHex","toString","$fa4a5aa5cdd6ce8e$export$fdc9c29511f1a926","color","$fa4a5aa5cdd6ce8e$export$79db3ad3d560d193","components","r","g","b","$fa4a5aa5cdd6ce8e$var$hueToRgb","p","q","t","$fa4a5aa5cdd6ce8e$export$c5ea230d2f55d434","rgb","$fa4a5aa5cdd6ce8e$export$21d90289cdbe307c","colorRgb","transform","transformResult","cmin","min","cmax","max","delta","l","abs","toFixed","$fa4a5aa5cdd6ce8e$export$c85ca4f4753af384","hsl","floor","$fa4a5aa5cdd6ce8e$export$29fb7152bd3f781a","$013bb80b3ccfc188$export$c5328dac6d89974f","params","primaryCb","$ih12A","preventContextMenu","addCursorMoveHandler","element","onMove","onSetColorAction","bind","downIsMove","pattern","fill","map","paletteButtons","button","selectColor","backgroundColor","redrawCanvas","e","coords","pointerEventsToOffsetCoords","cellX","cellY","cb","set","parse","prevCb","dfltClassName","clsName","className","classList","remove","add","$070b40bf88f7afea$export$f9e1fc62131d1b82","touches","$070b40bf88f7afea$export$c4dfce035d43d1e0","touch","clientX","clientY","$070b40bf88f7afea$export$4eb1c1f17f883a41","target","HTMLElement","rect","getBoundingClientRect","left","top","$070b40bf88f7afea$export$80eb02ad18c977f1","onDown","window","addEventListener","passive","onUp","removeEventListener","upIsMove","$070b40bf88f7afea$export$b3002a74c1b9a5fd","el","preventDefault","stopPropagation","$6e3d250e7771e99d$export$9a9aa9ffab568c99","$6e3d250e7771e99d$export$6cc254038363eb2f","$6e3d250e7771e99d$export$b64206a3d550df71","$6e3d250e7771e99d$export$be5cd583167290d2","$6e3d250e7771e99d$export$f9ca6c3b4d310360","$1VHh9","$b29a1f8e2035086d$export$afb809ac55339913","patterns","matrix","offsets","push","$b29a1f8e2035086d$var$generateOffsets","patternsFreq","$b29a1f8e2035086d$var$extractSourcePatternAt","flipped","axis","$b29a1f8e2035086d$var$flipPattern","rotated","count","pattern1","$b29a1f8e2035086d$var$rotatePattern","$b29a1f8e2035086d$var$getPatternDataFromSource","hashMap","Map","hasher","$b29a1f8e2035086d$var$PatternHasher","hash","arr","get","freqMap","patterns1","i","j","otherPattern","$b29a1f8e2035086d$var$patternsAreEqual","keys","freqs","pattern2","$b29a1f8e2035086d$var$normalizeArray","$b29a1f8e2035086d$var$generatePatternsAndFrequences","rules","offset","$b29a1f8e2035086d$var$encodeOffset","Bitmap","encodedOffset","flipEncodedOffset","$b29a1f8e2035086d$var$flipOffset","aIndex","a","bIndex","$b29a1f8e2035086d$var$patternsHaveMatch","$b29a1f8e2035086d$var$getRules","random","seed","rand","c","d","$b29a1f8e2035086d$var$makeRandom","$b29a1f8e2035086d$var$Matrix","$b29a1f8e2035086d$var$init","isEverythingCollapsed","lowestEntropyPoint","findMinEntropyCell","collapse","patternIndices","getResults","patternIndex","intersectionLengthX","intersectionLengthY","startXA","startYA","startXB","startYB","dx","dy","$b29a1f8e2035086d$var$encodePosition","position","input","sum","reduce","aRow","bRow","valueIndices","allPossibleValues","Set","$b29a1f8e2035086d$var$flatten","item","size","slice","$b29a1f8e2035086d$var$copyPattern","res","halfLen","rowA","rowB","tmp","tmp1","times","halfSize","circleOffset","lastPos","posOffset","patternCount","ceil","entropy","collapseMask","incollapsedCellsCount","setAll","paddingPatternCount","cellEnd","clear","minEntropy","Number","MAX_SAFE_INTEGER","cells","index","cell","cellIndex","availableValues","getOffsetsAsNumbers","selectedValue","value","propagateStartingAt","isInBounds","queue","$b29a1f8e2035086d$var$SetQueue","enqueue","origCellEncoded","dequeue","origCell","adjacentCellPos","adjacentCellIndex","propagateToCellByOffset","origCellIndex","origCellPatterns","resultTargetCellPatterns","origPattern","patternsByRule","orFromTheStart","targetCell","targetCellIndex","hasChange","and","longestCellLen","str","shouldJoin","currentSpan","$b29a1f8e2035086d$var$joinSpans","span","first","last","len","$b29a1f8e2035086d$var$whitePad","pos","has","delete","$665dc4e67c6f8c6a$export$3924f7882b5e2b61","Uint8Array","byteIndex","clearAll","byteOffset","byte","mask","setOffsetsByNumbers","offsetIndex","nextNonzeroOffset","origByte","bit","other","startThis","thisByte","module","exports"],"version":3,"file":"wave_function_collapse.54910ad0.js.map"}