{"mappings":"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","sources":["src/sketches/particle_toy/particle_toy.ts","src/common/cycled_request_animation_frame.ts","src/common/gl_utils.ts","src/sketches/particle_toy/data_texture.ts","src/sketches/particle_toy/fps_counter.ts","src/sketches/particle_toy/shader.ts","src/sketches/particle_toy/shaders/utils.glsl","src/sketches/particle_toy/shaders/draw_fragment.glsl","src/sketches/particle_toy/shaders/draw_vertex.glsl","src/sketches/particle_toy/shaders/data_vertex.glsl","src/sketches/particle_toy/shaders/data_fragment.glsl","src/sketches/particle_toy/sprays.ts"],"sourcesContent":["import {cycledRequestAnimationFrame} from \"common/cycled_request_animation_frame\"\nimport {GlUtils} from \"common/gl_utils\"\nimport {DataTexture, DataTexturePair, dataTextureSize, particlesCount} from \"sketches/particle_toy/data_texture\"\nimport {FpsCounter} from \"sketches/particle_toy/fps_counter\"\nimport {DataShader, DrawShader} from \"sketches/particle_toy/shader\"\nimport {particlesMovedPerSecond, sprays, uploadSprays, zeroSpray} from \"sketches/particle_toy/sprays\"\n\n// reading:\n// https://webglfundamentals.org/webgl/lessons/webgl-gpgpu.html\n// https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_draw_buffers\n\nconst speedRange = 5000\n\nexport function main(root: HTMLElement): void {\n\tconst canvas = document.createElement(\"canvas\")\n\t// TODO: handle resize\n\tconst rootSize = root.getBoundingClientRect()\n\tcanvas.setAttribute(\"width\", rootSize.width + \"\")\n\tcanvas.setAttribute(\"height\", rootSize.height + \"\")\n\tcanvas.style.cssText = \"position: absolute; top: 0; bottom: 0; left: 0; right: 0;\"\n\troot.appendChild(canvas)\n\n\tconst gl = canvas.getContext(\"webgl2\")!\n\t// TODO: check caps and presence of context\n\n\tconst idBuffer = makeIdBuffer(gl, particlesCount)\n\tconst squareBuffer = makeSquareBuffer(gl)\n\tconst coordsRange = {x: rootSize.width, y: rootSize.height}\n\tconst positionXTexture = new DataTexturePair(gl, makeDataArray(() => encodeFloat(Math.random() * coordsRange.x, coordsRange.x)))\n\tconst positionYTexture = new DataTexturePair(gl, makeDataArray(() => encodeFloat(Math.random() * coordsRange.y, coordsRange.y)))\n\tconst speedXTexture = new DataTexturePair(gl, makeDataArray(() => encodeFloat((Math.random() - 0.5) * 100, speedRange)))\n\tconst speedYTexture = new DataTexturePair(gl, makeDataArray(() => encodeFloat((Math.random() - 0.5) * 100, speedRange)))\n\n\tconst dataShader = new DataShader(gl)\n\tconst drawShader = new DrawShader(gl)\n\n\tsprays[0] = {\n\t\t...zeroSpray,\n\t\tx: coordsRange.x / 4,\n\t\ty: coordsRange.y / 2,\n\t\tdirection: Math.PI / 4,\n\t\tintensity: particlesCount / 10000,\n\t\tpower: 100,\n\t\tspread: Math.PI / 16\n\t}\n\n\tsprays[1] = {\n\t\t...zeroSpray,\n\t\tx: coordsRange.x * (3 / 4),\n\t\ty: coordsRange.y / 2,\n\t\tdirection: Math.PI * (3 / 4),\n\t\tintensity: particlesCount / 2000,\n\t\tpower: 50,\n\t\tspread: Math.PI / 16\n\t}\n\n\tconst dataTextures = [positionXTexture, positionYTexture, speedXTexture, speedYTexture]\n\tdataShader.use()\n\tgl.uniform2f(dataShader.screenSize, coordsRange.x, coordsRange.y)\n\tgl.uniform1i(dataShader.positionX, 0)\n\tgl.uniform1i(dataShader.positionY, 1)\n\tgl.uniform1i(dataShader.speedX, 2)\n\tgl.uniform1i(dataShader.speedY, 3)\n\tgl.uniform1f(dataShader.gravity, 9.8) // TODO: config\n\tgl.uniform1f(dataShader.bounce, 0.5) // TODO: config\n\tuploadSprays(gl, dataShader) // TODO: config\n\tconst dataShaderVao = GlUtils.makeBindVAO(gl)\n\tgl.bindBuffer(gl.ARRAY_BUFFER, squareBuffer)\n\tgl.enableVertexAttribArray(dataShader.vertex)\n\tgl.vertexAttribPointer(dataShader.vertex, 2, gl.FLOAT, false, 0, 0)\n\n\tconst drawTextures = [positionXTexture, positionYTexture]\n\tdrawShader.use()\n\tgl.uniform2f(drawShader.screenSize, coordsRange.x, coordsRange.y)\n\tgl.uniform1i(drawShader.positionX, 0)\n\tgl.uniform1i(drawShader.positionY, 1)\n\tconst drawVao = GlUtils.makeBindVAO(gl)\n\tgl.bindBuffer(gl.ARRAY_BUFFER, idBuffer)\n\tgl.enableVertexAttribArray(drawShader.id)\n\tgl.vertexAttribIPointer(drawShader.id, 1, gl.UNSIGNED_INT, 0, 0)\n\n\tlet particleMovementPointer = 0\n\n\tconst fpsCounter = new FpsCounter()\n\tfunction drawFrame(deltaTime: number): void {\n\t\tfpsCounter.recordFrame(deltaTime)\n\n\t\tconst firstMovedParticleIndex = particleMovementPointer\n\t\tconst lastMovedParticleIndex = firstMovedParticleIndex + Math.floor(particlesMovedPerSecond)\n\t\tparticleMovementPointer = lastMovedParticleIndex\n\t\tif(particleMovementPointer >= particlesCount){\n\t\t\tparticleMovementPointer = 0\n\t\t}\n\n\t\t// data calc step\n\t\twithFramebuffer(gl, () => {\n\t\t\tdataShader.use()\n\t\t\tgl.viewport(0, 0, dataTextureSize, dataTextureSize)\n\t\t\tgl.uniform1f(dataShader.deltaTime, deltaTime)\n\t\t\tgl.uniform1ui(dataShader.firstMovedParticleIndex, firstMovedParticleIndex)\n\t\t\tgl.uniform1ui(dataShader.lastMovedParticleIndex, lastMovedParticleIndex)\n\n\t\t\tbindTexturesToInputBuffers(gl, dataTextures)\n\t\t\tbindTexturesToOutputBuffers(gl, dataTextures)\n\n\t\t\tgl.bindVertexArray(dataShaderVao)\n\t\t\tgl.drawArrays(gl.TRIANGLES, 0, 6)\n\t\t})\n\n\t\tfor(const tex of dataTextures){\n\t\t\ttex.swap()\n\t\t}\n\n\t\t// draw step\n\t\tdrawShader.use()\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null)\n\t\tgl.viewport(0, 0, rootSize.width, rootSize.height)\n\n\t\tbindTexturesToInputBuffers(gl, drawTextures)\n\n\t\tgl.bindVertexArray(drawVao)\n\t\tgl.drawArrays(gl.POINTS, 0, particlesCount)\n\t}\n\n\tcycledRequestAnimationFrame(deltaTime => {\n\t\tif(deltaTime > 250){\n\t\t\treturn\n\t\t}\n\n\t\tdrawFrame(deltaTime / 1000)\n\t})\n}\n\nfunction makeDataArray(getValue: (index: number) => number): Uint32Array {\n\tconst data = new Array(dataTextureSize * dataTextureSize).fill(0).map((_, i) => getValue(i))\n\treturn new Uint32Array(data)\n}\n\nfunction makeIdBuffer(gl: WebGL2RenderingContext, count: number): WebGLBuffer {\n\tconst ids = new Array(count).fill(0).map((_, i) => i)\n\tconst idBuffer = gl.createBuffer()\n\tif(!idBuffer){\n\t\tthrow new Error(\"Cannot create webgl buffer\")\n\t}\n\tgl.bindBuffer(gl.ARRAY_BUFFER, idBuffer)\n\tgl.bufferData(gl.ARRAY_BUFFER, new Uint32Array(ids), gl.STATIC_DRAW)\n\treturn idBuffer\n}\n\nfunction makeSquareBuffer(gl: WebGL2RenderingContext): WebGLBuffer {\n\tconst squareBuffer = gl.createBuffer()\n\tif(!squareBuffer){\n\t\tthrow new Error(\"Cannot create webgl buffer\")\n\t}\n\tgl.bindBuffer(gl.ARRAY_BUFFER, squareBuffer)\n\tgl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, 1]), gl.STATIC_DRAW)\n\treturn squareBuffer\n}\n\nfunction withFramebuffer<T>(gl: WebGL2RenderingContext, action: () => T): T {\n\ttry {\n\t\tconst fb = gl.createFramebuffer()\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, fb)\n\t\treturn action()\n\t} finally {\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null)\n\t}\n}\n\nfunction bindTexturesToOutputBuffers(gl: WebGL2RenderingContext, textures: DataTexture[]): void {\n\tconst drawBuffersInput: number[] = []\n\tfor(let i = 0; i < textures.length; i++){\n\t\tconst texture = textures[i]!\n\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i, gl.TEXTURE_2D, texture.receivingTexture, 0)\n\t\tdrawBuffersInput.push(gl.COLOR_ATTACHMENT0 + i)\n\t}\n\tgl.drawBuffers(drawBuffersInput)\n}\n\nfunction bindTexturesToInputBuffers(gl: WebGL2RenderingContext, textures: DataTexture[]): void {\n\tfor(let i = 0; i < textures.length; i++){\n\t\tconst texture = textures[i]!\n\t\tgl.activeTexture(gl.TEXTURE0 + i)\n\t\tgl.bindTexture(gl.TEXTURE_2D, texture.texture)\n\t}\n}\n\nfunction encodeFloat(value: number, range: number): number {\n\treturn Math.floor((value / range) * 0x7fffffff) + 0x7fffffff\n}","/** Wrapped RequestAnimationFrame, which cycles.\n * Passes time since previous frame as argument.\n * Returns stopper function */\nexport function cycledRequestAnimationFrame(handler: (delta: number) => void): () => void {\n\tlet stopped = false\n\n\tlet prevCallTime = 0\n\n\tconst wrappedHandler = (time: number) => {\n\t\tif(stopped){\n\t\t\treturn\n\t\t}\n\t\tconst delta = time - prevCallTime\n\t\tprevCallTime = time\n\t\trequestAnimationFrame(wrappedHandler)\n\t\thandler(delta)\n\t}\n\n\trequestAnimationFrame(wrappedHandler)\n\n\treturn () => stopped = true\n}","export type Uniform = ReturnType<WebGL2RenderingContext[\"getUniformLocation\"]>\nexport type Attrib = ReturnType<WebGL2RenderingContext[\"getAttribLocation\"]>\n\n// assorted utility functions for webgl\nexport namespace GlUtils {\n\n\texport function getGlContext(canvas: HTMLCanvasElement): WebGL2RenderingContext {\n\t\tconst gl = canvas.getContext(\"webgl2\")\n\t\tif(!gl){\n\t\t\tthrow new Error(\"No webgl2 available.\")\n\t\t}\n\t\tgl.enable(gl.BLEND)\n\t\tgl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\n\t\tgl.disable(gl.SCISSOR_TEST) // can be good, need further investigation\n\t\tgl.disable(gl.CULL_FACE)\n\t\tgl.disable(gl.DEPTH_TEST)\n\t\tgl.disable(gl.POLYGON_OFFSET_FILL)\n\t\tgl.disable(gl.STENCIL_TEST)\n\t\treturn gl\n\t}\n\n\texport function makeShader(gl: WebGL2RenderingContext, type: \"vertex\" | \"fragment\", code: string): WebGLShader {\n\t\tlet shader: WebGLShader | null = null\n\t\ttry {\n\t\t\tshader = gl.createShader(type === \"vertex\" ? gl.VERTEX_SHADER : gl.FRAGMENT_SHADER)\n\t\t\tif(!shader){\n\t\t\t\tthrow new Error(\"No shader is created of type \" + type)\n\t\t\t}\n\t\t\tgl.shaderSource(shader, code)\n\t\t\tgl.compileShader(shader)\n\n\t\t\tconst success = gl.getShaderParameter(shader, gl.COMPILE_STATUS)\n\t\t\tconst log = gl.getShaderInfoLog(shader)\n\t\t\tif(!success){\n\t\t\t\tconsole.log(code)\n\t\t\t\tthrow new Error(\"Failed to compile shader of type \" + type + \": \" + log)\n\t\t\t} else if(log){\n\t\t\t\tconsole.warn(\"WebGL \" + type + \" shader compile log: \", log)\n\t\t\t}\n\n\t\t\treturn shader\n\t\t} catch(e){\n\t\t\tgl.deleteShader(shader)\n\t\t\tthrow e\n\t\t}\n\t}\n\n\texport function makeProgram(gl: WebGL2RenderingContext, vertexShaderCode: string, fragmentShaderCode: string): {program: WebGLProgram, shaders: WebGLShader[]} {\n\t\tlet fragShader: WebGLShader | null = null\n\t\tlet vertShader: WebGLShader | null = null\n\t\tlet program: WebGLProgram | null = null\n\t\ttry {\n\t\t\tfragShader = makeShader(gl, \"fragment\", fragmentShaderCode)\n\t\t\tvertShader = makeShader(gl, \"vertex\", vertexShaderCode)\n\t\t\tprogram = gl.createProgram()\n\t\t\tif(!program){\n\t\t\t\tthrow new Error(\"No webgl program was created.\")\n\t\t\t}\n\n\t\t\tgl.attachShader(program, fragShader)\n\t\t\tgl.attachShader(program, vertShader)\n\t\t\tgl.linkProgram(program)\n\n\t\t\tconst success = gl.getProgramParameter(program, gl.LINK_STATUS)\n\t\t\tconst log = gl.getProgramInfoLog(program)\n\t\t\tif(!success){\n\t\t\t\tthrow new Error(\"Failed to link program: \" + log)\n\t\t\t} else if(log){\n\t\t\t\tconsole.warn(\"WebGL program log: \", log)\n\t\t\t}\n\n\t\t\treturn {program, shaders: [fragShader, vertShader]}\n\t\t} catch(e){\n\t\t\tfragShader && gl.deleteShader(fragShader)\n\t\t\tvertShader && gl.deleteShader(vertShader)\n\t\t\tprogram && gl.deleteProgram(program)\n\t\t\tthrow e\n\t\t}\n\t}\n\n\texport function setViewportSizeByCanvas(gl: WebGL2RenderingContext, canvas: HTMLCanvasElement): {width: number, height: number} {\n\t\tconst width = canvas.clientWidth * window.devicePixelRatio\n\t\tconst height = canvas.clientHeight * window.devicePixelRatio\n\t\t// why do we need this...? is this a lost useless part of some extremely outdated tutorial?\n\t\tcanvas.width = width\n\t\tcanvas.height = height\n\t\tgl.viewport(0, 0, width, height)\n\t\treturn {width, height}\n\t}\n\n\texport function loadTexture(gl: WebGL2RenderingContext, url: string): Promise<WebGLTexture> {\n\t\treturn new Promise((ok, bad) => {\n\t\t\tconst img = new Image()\n\t\t\timg.onload = () => {\n\t\t\t\ttry {\n\t\t\t\t\tconst tex = makeBindSetupTexture(gl)\n\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img)\n\t\t\t\t\tgl.generateMipmap(gl.TEXTURE_2D)\n\t\t\t\t\tok(tex)\n\t\t\t\t} catch(e){\n\t\t\t\t\tbad(e)\n\t\t\t\t}\n\t\t\t}\n\t\t\timg.onerror = () => bad(new Error(\"Failed to load texture: \" + url))\n\t\t\timg.src = url\n\t\t})\n\t}\n\n\tfunction makeBindSetupTexture(gl: WebGL2RenderingContext): WebGLTexture {\n\t\tconst tex = gl.createTexture()\n\t\tif(!tex){\n\t\t\tthrow new Error(\"No texture was created.\")\n\t\t}\n\t\tgl.activeTexture(gl.TEXTURE0)\n\t\tgl.bindTexture(gl.TEXTURE_2D, tex)\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR)\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST)\n\t\treturn tex\n\t}\n\n\tconst squareVertexData: readonly number[] = [0, 0, 1, 0, 1, 1, 0, 1]\n\tconst squareIndexData: readonly number[] = [0, 1, 2, 0, 2, 3]\n\n\t/** Make vertex buffer that contains 2d coordinates for a square with side length = 1 */\n\texport function makeSquareVertexBuffer(gl: WebGL2RenderingContext): WebGLBuffer {\n\t\tconst buffer = makeBindBuffer(gl, gl.ARRAY_BUFFER)\n\t\tgl.bufferData(gl.ARRAY_BUFFER, new Float32Array(squareVertexData), gl.STATIC_DRAW)\n\t\treturn buffer\n\t}\n\n\t/** Make corresponding index buffer for vertex from `makeSquareVertexBuffer()` */\n\texport function makeSquareIndexBuffer(gl: WebGL2RenderingContext): WebGLBuffer {\n\t\tconst buffer = makeBindBuffer(gl, gl.ELEMENT_ARRAY_BUFFER)\n\t\tgl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(squareIndexData), gl.STATIC_DRAW)\n\t\treturn buffer\n\t}\n\n\texport function makeBindBuffer(gl: WebGL2RenderingContext, target: GLenum): WebGLBuffer {\n\t\tconst buf = gl.createBuffer()\n\t\tif(!buf){\n\t\t\tthrow new Error(\"Buffer was not created.\")\n\t\t}\n\t\tgl.bindBuffer(target, buf)\n\t\treturn buf\n\t}\n\n\texport function makeBindVAO(gl: WebGL2RenderingContext): WebGLVertexArrayObject {\n\t\tconst vao = gl.createVertexArray()\n\t\tif(!vao){\n\t\t\tthrow new Error(\"VAO was not created.\")\n\t\t}\n\t\tgl.bindVertexArray(vao)\n\t\treturn vao\n\t}\n\n}","export const particlesCount = 128000\nexport const dataTextureSize = 2 ** Math.ceil(Math.log2(Math.ceil(Math.sqrt(particlesCount))))\n\nfunction createDataTexture(gl: WebGL2RenderingContext, data: Uint32Array): WebGLTexture {\n\tconst tex = gl.createTexture()\n\tif(!tex){\n\t\tthrow new Error(\"No texture was created\")\n\t}\n\tgl.bindTexture(gl.TEXTURE_2D, tex)\n\tgl.texImage2D(\n\t\tgl.TEXTURE_2D,\n\t\t0, // mip level\n\t\tgl.R32UI, // internal format\n\t\tdataTextureSize, // width\n\t\tdataTextureSize, // height\n\t\t0, // border\n\t\tgl.RED_INTEGER, // format\n\t\tgl.UNSIGNED_INT, // type\n\t\tdata,\n\t\t0\n\t)\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST)\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST)\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\n\treturn tex\n}\n\nexport type DataTexture = DataTextureSingle | DataTexturePair\n\nexport class DataTextureSingle {\n\n\tprivate readonly _texture: WebGLTexture\n\n\tconstructor(gl: WebGL2RenderingContext, data: Uint32Array) {\n\t\tthis._texture = createDataTexture(gl, data)\n\t}\n\n\tget texture(): WebGLTexture {\n\t\treturn this._texture\n\t}\n\n\tget receivingTexture(): WebGLTexture {\n\t\treturn this._texture\n\t}\n\n}\n\nexport class DataTexturePair {\n\tprivate readonly a: WebGLTexture\n\tprivate readonly b: WebGLTexture\n\tprivate aIsActive = true\n\n\tconstructor(gl: WebGL2RenderingContext, data: Uint32Array) {\n\t\tthis.a = createDataTexture(gl, data)\n\t\tthis.b = createDataTexture(gl, data)\n\t}\n\n\tget texture(): WebGLTexture {\n\t\treturn this.aIsActive ? this.a : this.b\n\t}\n\n\tget receivingTexture(): WebGLTexture {\n\t\treturn this.aIsActive ? this.b : this.a\n\t}\n\n\tswap(): void {\n\t\tthis.aIsActive = !this.aIsActive\n\t}\n}","export class FpsCounter {\n\tprivate count = 0\n\tprivate time = 0\n\n\tconstructor(private readonly reportFreq = 3) {}\n\n\trecordFrame(deltaTime: number): void {\n\t\tthis.time += deltaTime\n\t\tthis.count++\n\t\twhile(this.time > this.reportFreq){\n\t\t\tthis.time -= this.reportFreq\n\t\t\tconsole.log(`FPS: ${this.count / this.reportFreq}`)\n\t\t\tthis.count = 0\n\t\t}\n\t}\n}","import glslUtils from \"./shaders/utils.glsl\"\nimport drawFragmentShaderCode from \"./shaders/draw_fragment.glsl\"\nimport drawVertexShaderCode from \"./shaders/draw_vertex.glsl\"\nimport dataVertexShaderCode from \"./shaders/data_vertex.glsl\"\nimport dataFragmentShaderCode from \"./shaders/data_fragment.glsl\"\nimport {GlUtils} from \"common/gl_utils\"\nimport {dataTextureSize} from \"sketches/particle_toy/data_texture\"\n\nfunction addUtils(code: string): string {\n\treturn `#version 300 es\\n#define DATA_TEXTURE_SIZE ${dataTextureSize}.0\\n` + glslUtils + \"\\n\" + code\n}\n\nexport abstract class Shader {\n\n\tprotected readonly program: WebGLProgram\n\tprotected readonly shaders: readonly WebGLShader[]\n\n\tconstructor(protected readonly gl: WebGL2RenderingContext, vertexCode: string, fragmentCode: string) {\n\t\tconst {program, shaders} = GlUtils.makeProgram(gl,\n\t\t\taddUtils(vertexCode),\n\t\t\taddUtils(fragmentCode)\n\t\t)\n\t\tthis.program = program\n\t\tthis.shaders = shaders\n\t}\n\n\tuse(): void {\n\t\tthis.gl.useProgram(this.program)\n\t}\n\n\tdelete(): void {\n\t\tthis.gl.deleteProgram(this.program)\n\t\tfor(const shader of this.shaders){\n\t\t\tthis.gl.deleteShader(shader)\n\t\t}\n\t}\n\n}\n\ntype Attrib = number\ntype Uniform = WebGLUniformLocation | null\n\nexport class DrawShader extends Shader {\n\n\treadonly positionX: Uniform\n\treadonly positionY: Uniform\n\treadonly id: Attrib\n\treadonly screenSize: Uniform\n\n\tconstructor(gl: WebGL2RenderingContext) {\n\t\tsuper(gl, drawVertexShaderCode, drawFragmentShaderCode)\n\t\tthis.positionX = gl.getUniformLocation(this.program, \"positionX\")\n\t\tthis.positionY = gl.getUniformLocation(this.program, \"positionY\")\n\t\tthis.id = gl.getAttribLocation(this.program, \"id\")\n\t\tthis.screenSize = gl.getUniformLocation(this.program, \"screenSize\")\n\t}\n}\n\nexport class DataShader extends Shader {\n\n\t// textures\n\treadonly positionX: Uniform\n\treadonly positionY: Uniform\n\treadonly speedX: Uniform\n\treadonly speedY: Uniform\n\n\t// uniforms\n\treadonly screenSize: Uniform\n\treadonly deltaTime: Uniform\n\treadonly gravity: Uniform\n\treadonly bounce: Uniform\n\treadonly firstMovedParticleIndex: Uniform\n\treadonly lastMovedParticleIndex: Uniform\n\treadonly sprayX: Uniform\n\treadonly sprayY: Uniform\n\treadonly sprayDirection: Uniform\n\treadonly sprayPower: Uniform\n\treadonly spraySpread: Uniform\n\treadonly sprayIntensity: Uniform\n\n\t// attribs\n\treadonly vertex: Attrib\n\n\tconstructor(gl: WebGL2RenderingContext) {\n\t\tsuper(gl, dataVertexShaderCode, dataFragmentShaderCode)\n\t\tthis.screenSize = gl.getUniformLocation(this.program, \"screenSize\")\n\t\tthis.positionX = gl.getUniformLocation(this.program, \"positionX\")\n\t\tthis.positionY = gl.getUniformLocation(this.program, \"positionY\")\n\t\tthis.speedX = gl.getUniformLocation(this.program, \"speedX\")\n\t\tthis.speedY = gl.getUniformLocation(this.program, \"speedY\")\n\t\tthis.deltaTime = gl.getUniformLocation(this.program, \"deltaTime\")\n\t\tthis.vertex = gl.getAttribLocation(this.program, \"vertex\")\n\t\tthis.firstMovedParticleIndex = gl.getUniformLocation(this.program, \"firstMovedParticleIndex\")\n\t\tthis.lastMovedParticleIndex = gl.getUniformLocation(this.program, \"lastMovedParticleIndex\")\n\t\tthis.gravity = gl.getUniformLocation(this.program, \"gravity\")\n\t\tthis.bounce = gl.getUniformLocation(this.program, \"bounce\")\n\t\tthis.sprayX = gl.getUniformLocation(this.program, \"sprayX\")\n\t\tthis.sprayY = gl.getUniformLocation(this.program, \"sprayY\")\n\t\tthis.sprayDirection = gl.getUniformLocation(this.program, \"sprayDirection\")\n\t\tthis.sprayPower = gl.getUniformLocation(this.program, \"sprayPower\")\n\t\tthis.spraySpread = gl.getUniformLocation(this.program, \"spraySpread\")\n\t\tthis.sprayIntensity = gl.getUniformLocation(this.program, \"sprayIntensity\")\n\t}\n\n}","precision mediump float;\nprecision mediump usampler2D;\n\n#define SPEED_RANGE 5000.0\n#define INT_RANGEU 0x7fffffffu\n#define INT_RANGEF float(INT_RANGEU)\n\nfloat decodeFloat(uint value, float range){\n  return (float(value) / INT_RANGEF) * range;\n}\n\nuint encodeFloat(float value, float range){\n  return uint(((value / range) * INT_RANGEF) + INT_RANGEF);\n}\n\nuvec2 getUintPairByCoords(usampler2D texX, usampler2D texY, vec2 coords){\n  return uvec2(uint(texture(texX, coords).x), uint(texture(texY, coords).x));\n}\n\nuvec2 getUintPairByIndex(usampler2D texX, usampler2D texY, uint index){\n  float findex = float(index);\n  float y = floor(findex / DATA_TEXTURE_SIZE);\n  float x = mod(findex, DATA_TEXTURE_SIZE);\n  vec2 texcoord = (vec2(x, y) + 0.5) / DATA_TEXTURE_SIZE;\n  return uvec2(texture(texX, texcoord).x, texture(texY, texcoord).x);\n}\n\n\n#define getFloatPairByCoords(texX, texY, coords, range) (((vec2(texture(texX, coords).x, texture(texY, coords).x) - INT_RANGEF) / INT_RANGEF) * range)\n#define getFloatPairByIndex(texX, texY, index, range) (((vec2(getUintPairByIndex(texX, texY, index)) - INT_RANGEF) / INT_RANGEF) * range)\n\nvec4 absCoordsIntoScreenCoords(vec2 coords, vec2 screenSize){\n  return vec4(((coords / screenSize) * 2.0) - 1.0, 0, 1);\n}\n\nuint fragCoordToIndex(vec2 fragCoord){\n  return uint(fragCoord.x) + uint(fragCoord.y * DATA_TEXTURE_SIZE);\n}\n\n#define randomUint(seed) ((((seed * 505339u) % 299099u) * 982231u) % 116833u) * 683201u\n#define randomFloatFromUint(seed) normalizeRandomUint(randomUint(seed))\n#define normalizeRandomUint(value) float(value % 0xffffffu) / float(0xffffffu)","out vec4 outColor;\n\nvoid main() {\n\toutColor = vec4(1, 1, 1, 1);\n}","uniform usampler2D positionX;\nuniform usampler2D positionY;\nuniform vec2 screenSize;\nin uint id;\n\nvoid main(){\n  vec2 absCoords = getFloatPairByIndex(positionX, positionY, id, screenSize);\n  vec4 screenCoords = absCoordsIntoScreenCoords(absCoords, screenSize);\n\tgl_Position = screenCoords;\n  gl_PointSize = 1.0;\n}\n","in vec4 vertex;\nvoid main() {\n\tgl_Position = vertex;\n}","uniform vec2 screenSize;\nuniform float deltaTime;\n\nuniform uint firstMovedParticleIndex;\nuniform uint lastMovedParticleIndex;\n\nuniform float gravity;\nuniform float bounce;\nuniform vec4 sprayX;\nuniform vec4 sprayY;\nuniform vec4 sprayDirection;\nuniform vec4 sprayPower;\nuniform vec4 spraySpread;\nuniform uvec4 sprayIntensity;\n\nuniform usampler2D positionX;\nuniform usampler2D positionY;\nuniform usampler2D speedX;\nuniform usampler2D speedY;\n\nlayout(location = 0) out uint outPosX;\nlayout(location = 1) out uint outPosY;\nlayout(location = 2) out uint outSpeedX;\nlayout(location = 3) out uint outSpeedY;\n\n#define moveBySpray(pos, spd, index, sprayIndex) moveBySprayFn(pos, spd, index, vec2(sprayX[sprayIndex], sprayY[sprayIndex]), sprayDirection[sprayIndex], sprayPower[sprayIndex], spraySpread[sprayIndex])\n\nvoid moveBySprayFn(inout vec2 position, inout vec2 speed, uint index, vec2 sprayPosition, float direction, float power, float spread){\n\tposition = sprayPosition;\n\tuint rnd = randomUint(index);\n\tdirection += spread * (normalizeRandomUint(rnd) - 0.5);\n\tpower += (power / 3.0) * (normalizeRandomUint(rnd * 134u) - 0.5);\n\tspeed = vec2(cos(direction) * power, sin(direction) * power);\n}\n\nvoid main(){\n\tvec2 texcoord = gl_FragCoord.xy / DATA_TEXTURE_SIZE;\n\tuint index = fragCoordToIndex(gl_FragCoord.xy);\n\n\tvec2 position = getFloatPairByCoords(positionX, positionY, texcoord, screenSize);\n\tvec2 speed = getFloatPairByCoords(speedX, speedY, texcoord, SPEED_RANGE);\n\n\tuint sprayOffset = index - firstMovedParticleIndex;\n\tif(sprayOffset >= 0u){\n\t\tif(sprayOffset < sprayIntensity[0]){\n\t\t\tmoveBySpray(position, speed, index, 0);\n\t\t} else {\n\t\t\tsprayOffset -= sprayIntensity[0];\n\t\t\tif(sprayOffset < sprayIntensity[1]){\n\t\t\t\tmoveBySpray(position, speed, index, 1);\n\t\t\t} else {\n\t\t\t\tsprayOffset -= sprayIntensity[1];\n\t\t\t\tif(sprayOffset < sprayIntensity[2]){\n\t\t\t\t\tmoveBySpray(position, speed, index, 2);\n\t\t\t\t} else {\n\t\t\t\t\tsprayOffset -= sprayIntensity[2];\n\t\t\t\t\tif(sprayOffset < sprayIntensity[3]){\n\t\t\t\t\t\tmoveBySpray(position, speed, index, 3);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tposition = position + (speed * deltaTime);\n\tif(position.x < 0.0){\n\t\tposition.x = 0.01;\n\t\tspeed.x = -speed.x * bounce;\n\t} else if(position.x > screenSize.x){\n\t\tposition.x = screenSize.x - 0.01;\n\t\tspeed.x = -speed.x * bounce;\n\t}\n\tif(position.y < 0.0){\n\t\tposition.y = 0.01;\n\t\tspeed.y = -speed.y * bounce;\n\t} else if(position.y > screenSize.y){\n\t\tposition.y = screenSize.y - 0.01;\n\t\tspeed.y = -speed.y * bounce;\n\t}\n\n\tspeed.y -= gravity * deltaTime;\n\t\n\toutPosX = encodeFloat(position.x, screenSize.x);\n    outPosY = encodeFloat(position.y, screenSize.y);\n    outSpeedX = encodeFloat(speed.x, SPEED_RANGE);\n    outSpeedY = encodeFloat(speed.y, SPEED_RANGE);\n}","import {Uniform} from \"common/gl_utils\"\nimport {DataShader} from \"sketches/particle_toy/shader\"\n\nexport type Spray = {\n\tx: number\n\ty: number\n\tdirection: number\n\tpower: number\n\tspread: number\n\tintensity: number // particles per frame\n}\n\nexport const zeroSpray: Spray = {x: 0, y: 0, direction: 0, power: 0, spread: 0, intensity: 0}\nexport const sprays: Spray[] = [{...zeroSpray}, {...zeroSpray}, {...zeroSpray}, {...zeroSpray}]\n\nfunction uploadFloatSprayField(gl: WebGL2RenderingContext, uniform: Uniform, field: keyof Spray) {\n\tgl.uniform4f(uniform, sprays[0]![field], sprays[1]![field], sprays[2]![field], sprays[3]![field])\n}\n\nfunction uploadUintSprayField(gl: WebGL2RenderingContext, uniform: Uniform, field: keyof Spray) {\n\tgl.uniform4ui(uniform, sprays[0]![field], sprays[1]![field], sprays[2]![field], sprays[3]![field])\n}\n\nexport let particlesMovedPerSecond = 0\nexport function uploadSprays(gl: WebGL2RenderingContext, shader: DataShader): void {\n\tparticlesMovedPerSecond = sprays\n\t\t.filter(spray => spray.x !== 0 && spray.y !== 0)\n\t\t.map(spray => spray.intensity)\n\t\t.reduce((a, b) => a + b, 0)\n\n\tuploadFloatSprayField(gl, shader.sprayX, \"x\")\n\tuploadFloatSprayField(gl, shader.sprayY, \"y\")\n\tuploadFloatSprayField(gl, shader.sprayDirection, \"direction\")\n\tuploadFloatSprayField(gl, shader.sprayPower, \"power\")\n\tuploadFloatSprayField(gl, shader.spraySpread, \"spread\")\n\tuploadUintSprayField(gl, shader.sprayIntensity, \"intensity\")\n}"],"names":["$5DUDw","parcelRequire","$0f868be849c07a1e$export$f22da7240b7add18","root","canvas","document","createElement","rootSize","getBoundingClientRect","setAttribute","width","height","style","cssText","appendChild","gl","getContext","idBuffer","count","ids","Array","fill","map","_","i","createBuffer","Error","bindBuffer","ARRAY_BUFFER","bufferData","Uint32Array","STATIC_DRAW","$0f868be849c07a1e$var$makeIdBuffer","$3ekh2","particlesCount","squareBuffer","Float32Array","$0f868be849c07a1e$var$makeSquareBuffer","coordsRange","x","y","positionXTexture","DataTexturePair","$0f868be849c07a1e$var$makeDataArray","$0f868be849c07a1e$var$encodeFloat","Math","random","positionYTexture","speedXTexture","speedYTexture","dataShader","$5udHq","DataShader","drawShader","DrawShader","$dbJCa","sprays","zeroSpray","direction","PI","intensity","power","spread","dataTextures","use","uniform2f","screenSize","uniform1i","positionX","positionY","speedX","speedY","uniform1f","gravity","bounce","uploadSprays","dataShaderVao","$d4DhX","GlUtils","makeBindVAO","enableVertexAttribArray","vertex","vertexAttribPointer","FLOAT","drawTextures","drawVao","id","vertexAttribIPointer","UNSIGNED_INT","particleMovementPointer","fpsCounter","$hf9LN","FpsCounter","cycledRequestAnimationFrame","deltaTime","recordFrame","firstMovedParticleIndex","lastMovedParticleIndex","floor","particlesMovedPerSecond","action","fb","createFramebuffer","bindFramebuffer","FRAMEBUFFER","$0f868be849c07a1e$var$withFramebuffer","viewport","dataTextureSize","uniform1ui","$0f868be849c07a1e$var$bindTexturesToInputBuffers","textures","drawBuffersInput","length","texture","framebufferTexture2D","COLOR_ATTACHMENT0","TEXTURE_2D","receivingTexture","push","drawBuffers","$0f868be849c07a1e$var$bindTexturesToOutputBuffers","bindVertexArray","drawArrays","TRIANGLES","tex","swap","POINTS","drawFrame","getValue","data","activeTexture","TEXTURE0","bindTexture","value","range","$6d25a2878a0e4597$export$519e26ca1f10de43","handler","stopped","prevCallTime","wrappedHandler","time","delta","requestAnimationFrame","$c2a4196f056f95b3$export$c925bebd88462bbe","makeShader","type","code","shader","createShader","VERTEX_SHADER","FRAGMENT_SHADER","shaderSource","compileShader","success","getShaderParameter","COMPILE_STATUS","log","getShaderInfoLog","console","warn","e","deleteShader","getGlContext","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","disable","SCISSOR_TEST","CULL_FACE","DEPTH_TEST","POLYGON_OFFSET_FILL","STENCIL_TEST","makeProgram","vertexShaderCode","fragmentShaderCode","fragShader","vertShader","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","shaders","deleteProgram","setViewportSizeByCanvas","clientWidth","window","devicePixelRatio","clientHeight","loadTexture","url","Promise","ok","bad","img","Image","onload","createTexture","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_LINEAR","TEXTURE_MAG_FILTER","NEAREST","makeBindSetupTexture","texImage2D","RGBA","UNSIGNED_BYTE","generateMipmap","onerror","src","squareVertexData","squareIndexData","makeBindBuffer","target","buf","makeSquareVertexBuffer","buffer","makeSquareIndexBuffer","ELEMENT_ARRAY_BUFFER","Uint16Array","vao","createVertexArray","$5aa7663b69bdf641$export$7b09a2fd87fa5952","$5aa7663b69bdf641$export$35b20dd8e412bf0c","ceil","log2","sqrt","$5aa7663b69bdf641$var$createDataTexture","R32UI","RED_INTEGER","$5aa7663b69bdf641$export$b493e764abca6954","aIsActive","constructor","this","a","b","$0dd95076cf36ee24$export$b25b355fca609f64","reportFreq","$aAGU0","$8a0425e1a044e327$var$addUtils","$parcel$interopDefault","$8a0425e1a044e327$export$462bb059fed9d9e5","vertexCode","fragmentCode","useProgram","delete","$8a0425e1a044e327$export$c00e9721819f822c","super","$72NEL","$6daLX","getUniformLocation","getAttribLocation","$8a0425e1a044e327$export$9d5a08083c70a55e","$5W6s1","$8qbFu","sprayX","sprayY","sprayDirection","sprayPower","spraySpread","sprayIntensity","module","exports","$4da073c35f6e776e$export$dce77d77463cc696","$4da073c35f6e776e$export$4841f336172d2a28","$4da073c35f6e776e$var$uploadFloatSprayField","uniform","field","uniform4f","$4da073c35f6e776e$export$b4f52307a400e07c","$4da073c35f6e776e$export$d66fa27e5f3ec244","filter","spray","reduce","uniform4ui","$4da073c35f6e776e$var$uploadUintSprayField"],"version":3,"file":"particle_toy.7982cbfd.js.map"}